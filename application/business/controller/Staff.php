<?php
// +----------------------------------------------------------------------
// | Ht.Memorial
// +----------------------------------------------------------------------
// | Copyright (c) 2017-2017 http://www.yn123.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: ding <dingzhangze@163.com>
// +----------------------------------------------------------------------

namespace app\business\controller;

use think\Db;
use app\business\service\DataService;
use app\business\service\ToolsService;
/**
 * 员工管理
 * Class Cemetery
 * @package app\admin\controller
 * @author ding <dingzhangze@163.com>
 * @date 2017/06/23
 */
class Staff extends BasicBusiness
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user = session('b_user');
        $this->uid=$this->user['create_by'];
    }

    /**
     * 指定当前数据表
     * @var string
     */
    protected $table = 'BusinessStaff';

    //列表
    public function index()
    {
        // 设置页面标题
        $this->title = '员工管理';
        // 获取到所有GET参数
        $get = $this->request->get();
        // 实例Query对象
        $map=[
            'is_deleted'=>0,
            'create_by'=>$this->uid
        ];
        $db = Db::name($this->table)->where($map);
        // 应用搜索条件
        foreach (['username', 'phone'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }
        // 实例化并显示

        $data = parent::_list($db, true, false);
        foreach($data['list'] as $key=>$list) {
            $data['list'][$key]['sector'] = Db::name('business_auth')->where('id',$list['sector'])->value('name');
            $data['list'][$key]['job'] = Db::name('business_auth')->where('id',$list['job'])->value('name');
        }
        return $this->fetch('', $data);
    }

    /**
     * 添加员工
     */
    public function add()
    {
        // 获取职位
        $jobs = $this->_getJob();
        $this->assign('jobs', $jobs);
        // 获取部门
        $menus = $this->_getDepartment();
        $this->assign('menus', $menus);
        return $this->_form($this->table, 'form');
    }

    /**
     * 添加表单数据默认处理
     * @param array $data
     */
    public function _form_filter(&$data)
    {
        if ($this->request->isPost()) {
            $result=input('post.');
            $user = Db::name('BusinessStaff')->where('username', $result['username'])->find();


            
            $result['authorize'] = $result['job'];


            if (isset($result['id'])) {
                // 修改
                $ret=Db::name($this->table)->where('id', $result['id'])->update($result);
            }else {
                $result['password'] = admin_md5($data['password']);
                // 添加
                !empty($user) && $this->error('登录账号已存在，请重新输入!');
                $ret=Db::name($this->table)->insert($result);
            }

            $ret!== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('business/staff/index').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');
        }
    }


    /**
     * 编辑员工
     */
    public function edit()
    {
        if(is_mobile()){
            $id = $this->request->get('id');
            $staff=Db::name('business_staff')->where('id',$id)->find();
            $staff['job']=Db::name('business_auth')->where('id',$staff['job'])->value('name');
            $this->assign('staff',$staff);
            if ($this->request->isPost()) {
                    $result = $this->request->param('');
                    $res=Db::name('business_staff')->update($result);
                    if($res){
                        $this->success('修改成功！', '@business');
                    }else{
                        $this->error('修改失败 ,稍后再试');
                    }

            }
            return $this->fetch('form');
        }else{
            return $this->add();
        }
    }

    /**
     * 获取部门 辅助方法
     * @return array
     */
    private function _getDepartment() {
        $map=[
            'type'=>1,
            'is_deleted'=>0,
            'create_by'=>$this->uid
        ];
        $_menus = Db::name('BusinessAuth')->where($map)->order('sort desc,id desc')->select();
        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }
        return $menus;
    }

    /**
     * 获取部门 辅助方法
     * @return array
     */
    private function _getJob() {
        $map=[
            'type'=>2,
            'is_deleted'=>0,
            'create_by'=>$this->uid
        ];
        $_job = Db::name('BusinessAuth')->where($map)->order('sort desc,id desc')->select();
        $jobs = ToolsService::arr2table($_job);
        foreach ($jobs as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($jobs[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($jobs[$key]);
                }
            }
        }
        return $jobs;
    }

    /**
     * 授权管理
     * @return array|string
     */
    public function auth() {
        return $this->_form($this->table, 'auth');
    }

    /**
     * 密码修改
     */
    public function pass() {
        if (in_array('10000', explode(',', $this->request->post('id')))) {
            $this->error('系统超级账号禁止操作！');
        }
        if ($this->request->isGet()) {
            $this->assign('verify', false);
            return $this->_form($this->table, 'pass');
        }
        $data = $this->request->post();
        if ($data['password'] !== $data['repassword']) {
            $this->error('两次输入的密码不一致！');
        }
        if (DataService::save($this->table, ['id' => $data['id'], 'password' => admin_md5($data['password'])])) {
            if(is_mobile()){
                $this->success('密码修改成功，下次请使用新密码登录！', '@business');
            }else{
                $this->success('密码修改成功，下次请使用新密码登录！', '');
            }
        }
        $this->error('密码修改失败，请稍候再试！');
    }

    /**
     * 删除员工
     */
    public function del() {
        if (in_array('10000', explode(',', $this->request->post('id')))) {
            $this->error('系统超级账号禁止删除！');
        }
        if (DataService::update($this->table)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /**
     * 员工禁用
     */
    public function forbid() {
        if (in_array('10000', explode(',', $this->request->post('id')))) {
            $this->error('系统超级账号禁止操作！');
        }
        if (DataService::update($this->table)) {
            $this->success("禁用成功！", '');
        }
        $this->error("禁用失败，请稍候再试！");
    }

    /**
     * 员工启用
     */
    public function resume() {
        if (DataService::update($this->table)) {
            $this->success("启用成功！", '');
        }
        $this->error("启用失败，请稍候再试！");
    }

}