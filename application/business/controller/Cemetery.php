<?php
// +----------------------------------------------------------------------
// | Ht.Memorial
// +----------------------------------------------------------------------
// | Copyright (c) 2017-2017 http://www.yn123.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: ding <dingzhangze@163.com>
// +----------------------------------------------------------------------

namespace app\business\controller;

use app\api\model\Jssdk;
use think\Db;
use app\business\service\DataService;
use app\business\service\ToolsService;
use think\Validate;

/**
 * 公墓管理
 * Class Cemetery
 * @package app\admin\controller
 * @author ding <dingzhangze@163.com>
 * @date 2017/06/01
 */
class Cemetery extends BasicBusiness
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user = session('b_user');
        $this->uid = $this->user['create_by'];

        $grave = Db::name('CemeteryTomb')->where(['is_deleted'=>0,'create_by'=>$this->uid,'pid'=>0])->order('sort desc,id desc')->find();
        $this->assign('grave',$grave);
    }


    /**
     * 指定当前数据表
     * @var string
     */
    protected $table = 'Cemetery';
    protected $categoryTable = 'CemeteryCategory';
    protected $cemeterySnTable = 'cemeterySn';
    protected $tables = 'CemeteryTomb';

    /*
    * 公墓列表
    */
    public function index()
    {
        if (is_mobile()){
            // 分类处理
            $_menus = Db::name('CemeteryTomb')->where(['is_deleted'=>0,'create_by'=>$this->uid])->order('sort desc,id desc')->select();
            $menus = ToolsService::arr2tree($_menus, 'id', 'pid', 'children');
            $this->assign('menus', $menus);
            return $this->fetch('');
        }else {
            $this->title = '公墓管理';
            $get = $this->request->get();
            $map = [
                'is_deleted' => 0,
                'create_by' => $this->uid
            ];

            // 根据分类搜索
            if (isset($get['cid']) && $get['cid'] !== '' && $get['cid'] != '-1') {
                $cateIds = $this->_searchByCategory($get['cid']);
                if ($cateIds !== '') {
                    $db = Db::name($this->cemeterySnTable)->where('area_id', 'in', $cateIds)->where($map);
                } else {
                    $db = Db::name($this->cemeterySnTable)->where('area_id', $get['cid'])->where($map);
                }
            } else {
                // 实例Query对象
                $db = Db::name($this->cemeterySnTable)->where($map);
            }
            // 应用搜索条件
            foreach (['name', 'cemetery_sn'] as $key) {
                if (isset($get[$key]) && $get[$key] !== '') {
                    $db->where($key, 'like', "%{$get[$key]}%");
                }
            }

            // 分类名称
            $data = parent::_list($db, true, false);
            foreach ($data['list'] as $key => $list) {
                $data['list'][$key]['order_state'] = Db::name('cemetery_order')->where('cemetery_sn', $list['cemetery_sn'])->value('order_state');
            }
            // 获取商品分类
            $menus = $this->_gettombCategory();
            $this->assign('menus', $menus);
            return $this->fetch('', $data);
        }
    }


    /*
     * 添加公墓
     */
    public function add()
    {

        $this->title = '添加公墓';
        list($menus, $resCateData) = $this->_getGoodsCategory();
        $this->assign('menus', $menus);
        $this->assign('categoryList', $resCateData);
        return $this->_form($this->cemeterySnTable, 'form');


    }

    /**
     * 公墓分类 表单数据前缀方法
     * @param array $vo
     */
    protected function _add_form_filter(&$vo)
    {
        if ($this->request->isPost()) {
            $result = input('post.');
            $grave_id=explode('_', $result['province']) ;
            $result['grave_id'] = $grave_id[0];
            $result['area_id'] = $result['city'];
            unset($result['province'], $result['city']);
            //查询所属陵园,墓区编号
            $area_id = Db::name('CemeteryTomb')->where('id', $result['area_id'])->find();
            $grave_code = Db::name('CemeteryTomb')->where('id', $result['grave_id'])->find();
            if (!isset($result['id'])) {
                $ss = Db::name($this->table)->insertGetId($result);

                if ($ss) {
                    $num = input('post.stock') + $result['row_id'];
                    $len = strlen($num);
                    $arr = array();

                    for ($i = $result['row_id']; $i <= $num-1; $i++) {
                        if ($len <= 4) {
                            $NewsNum = str_pad($i, 3, "0", STR_PAD_LEFT);
                            $cemetery_sn = $grave_code['code'] . '-' . $area_id['code']  . '-' . $NewsNum . '-' . $result['type'];
                            $result['cemetery_sn'] = $cemetery_sn;
                            $result['cemetery_id'] = $ss;
                            $snData[] = $result;
                            $Hdata[] = [
                                'cemetery_sn' => $cemetery_sn,
                                'hall_type' => $result['type']
                            ];
                        }
                    }
                }
                // 插入产品表  开通云纪念馆
//                $res = Db::name("Hall")->insertAll($Hdata);
                $ret = Db::name($this->cemeterySnTable)->insertAll($snData);
                $ret !== false ? $this->success('恭喜，保存成功哦！', url('/') . 'business.html#' . url('cemetery/cetree') . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
            }

        }

    }


    /**
     * 编辑公墓信息
     */
    public function edit()
    {
        $this->title = '编辑公墓';
        $ids = input('get.id');
        if ($this->request->isPost()) {
            $result = input('post.');
            //重新拼装墓穴编号
            $result['cemetery_sn'] = substr($result['cemetery_sn'], 0, strrpos($result['cemetery_sn'], '-')).'-'.$result['type'];
            $ids = $result['id'];
            unset($result['province'], $result['city'], $result['id'], $result['area']);
            $ret = Db::name($this->cemeterySnTable)->where('id', $ids)->update($result);
            $ret !== false ? $this->success('恭喜，保存成功哦！', url('/') . 'business.html#' . url('cemetery/index') . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
        }
        $ceme = Db::name($this->cemeterySnTable)->where('id', $ids)->find();
        $tomb = Db::name($this->tables)->where('id', $ceme['area_id'])->find();
        $grave = Db::name($this->tables)->where('id', $ceme['grave_id'])->find();
        list($menus, $resCateData) = $this->_getGoodsCategory();
        $this->assign('menus', $menus);
        $this->assign('tomb', $tomb);
        $this->assign('grave', $grave);
        $this->assign('categoryList', $resCateData);
        return $this->_form($this->cemeterySnTable, 'form');
    }

    /*
     * 公墓分类
     */
    public function category()
    {


        $this->title = '墓型分类管理';
        $db = Db::name($this->categoryTable)->where(['create_by'=>$this->uid,'is_deleted'=>0])->order('sort asc, id asc');

        parent::_list($db, false);
    }

    /*
     *添加公墓分类
     */
    public function addCategory()
    {
        // 获取分类
        list($menus, $resCateData) = $this->_getGoodsCategory();
        $this->assign('menus', $menus);
        $this->assign('categoryList', $resCateData);
        return $this->_form($this->categoryTable, 'categoryform');

    }

    /**
     * 编辑公墓分类
     */
    public function editCategory()
    {
        return $this->addCategory();
    }


    /**
     * 获取分类 辅助方法
     * @return array
     */
    private function _getGoodsCategory()
    {
        // 分类处理
        $_menus = Db::name($this->tables)->where(['is_deleted'=>0,'create_by'=>$this->uid])->order('sort desc,id desc')->select();
        // 拼装联动分类选择数据
        $categoryList = ToolsService::arr2tree($_menus, 'id', 'pid', 'sub');
        $resCateData = [];
        foreach ($categoryList as $cKey => $cate) {
            $cateData = [
                'provinceCode' => $cate['id'],
                'provinceName' => $cate['name'],
            ];
            $resCateData[$cKey] = $cateData;

            if (!empty($cate['sub'])) {
                foreach ($cate['sub'] as $sKey => $sub) {
                    $subData = [
                        'cityCode' => $sub['id'],
                        'cityName' => $sub['name'],
                    ];
                    $resCateData[$cKey]['mallCityList'][$sKey] = $subData;
                }
            }else {
                $resCateData[$cKey]['mallCityList'] = [];
            }

        }

        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }

        return [$menus, json_encode($resCateData)];
    }

    /**
     * 文章添加/编辑 返回结果跳转处理
     * @param $result
     */
    protected function _add_form_result(&$result)
    {
        $result !== false ? $this->success('恭喜，保存成功哦！', url('/') . 'business.html#' . url('cemetery/index') . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
    }

    /**
     * 删除公墓分类
     */
    public function delCategory()
    {
        if (DataService::update($this->categoryTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }


    /**
     * 根据分类搜索
     * @param int $cid 商品分类id
     * @return array|string
     */
    private function _searchByCategory($cid)
    {
        $cateData = Db::name($this->categoryTable)->where('id',$cid)->field('id')->select();
        $cateIds = [];
        foreach ($cateData as $cate) {
            $cateIds[] = $cate['id'];

        }
        $cateIds = implode(',', $cateIds);
        return $cateIds;
    }

    /**
     * 获取分类 辅助方法
     * @return array
     */
    private function _getCemeCategory()
    {
        // 商品分类处理
        $_menus = Db::name($this->categoryTable)->where('create_by',$this->uid)->order('sort desc,id desc')->select();
//        $_menus[] = ['name' => '顶级分类', 'id' => '0', 'pid' => '-1'];
        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }
        return $menus;
    }


    /**
     * 获取墓区 辅助方法
     * @return array
     */
    private function _getTombCategory()
    {
        // 商品分类处理
        $_menus = Db::name($this->tables)->where('create_by',$this->uid)->order('sort desc,id desc')->select();
//        $_menus[] = ['name' => '顶级分类', 'id' => '0', 'pid' => '-1'];
        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }
        return $menus;
    }

    /**
     * 删除公墓
     */
    public function del()
    {
        if (DataService::update($this->cemeterySnTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /**
     * 公墓下架
     */
    public function forbid()
    {
        if (DataService::update($this->cemeterySnTable)) {
            $this->success("公墓下架成功！", '');
        }
        $this->error("公墓下架下架失败，请稍候再试！");
    }

    /**
     * 公墓上架
     */
    public function resume()
    {
        if (DataService::update($this->cemeterySnTable)) {
            $this->success("公墓上架成功！", '');
        }
        $this->error("公墓上架失败，请稍候再试！");
    }


    /**
     * 获取分类 树形结构 辅助方法
     * @return array
     */
    private function _getStorageCategoryTree()
    {
        // 分类处理
        $_menus = Db::name($this->tables)->where(['is_deleted'=>0,'create_by'=>$this->uid])->order('sort desc,id desc')->select();
        $menus = ToolsService::arr2tree($_menus, 'id', 'pid', 'children');
        return $menus;
    }

    private function _getCateNameById($categoryId)
    {
        return Db::name($this->tables)->where(['id'=> $categoryId,'create_by'=>$this->uid])->value('name');
    }

    private function _getUrnStatusArray($categoryId)
    {

        // 获取续费提醒数量
        $ceSn=Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId, 'is_sell' => 1])->select();
        $needRenewal=0;
        foreach ($ceSn as $value){
            $ceOd=[
                'order_state' => 20,
                'cemetery_sn' =>$value['cemetery_sn']
            ];
            $needRenewal=Db::name('cemetery_order')->where($ceOd)->whereTime('end_time', 'week')->count();
        }

        $available = Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId, 'is_sell' => 0])->count();
        $unavailable = Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId, 'is_sell' => 1])->count();
        $disabled = Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId, 'status' => 0])->count();
        $destine = Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId, 'is_sell' => 2])->count();
        $total = Db::name($this->cemeterySnTable)->where(['area_id' => $categoryId])->count();
        return [$needRenewal,$available, $unavailable, $disabled, $destine, $total];
    }
    /***************************** 墓穴位置管理 *****************************/

    /**
     * 墓位平面图
     */
    public function cetree()
    {
        $alert = [
            'type'    => 'info',
            'title'   => '墓位位状态提示',
            'content' => '<ul>
                            <li>预定未付款  <span style="background: #09f"></span></li>
                            <li>预定成功    <span style="background: #6f599c"></span></li>
                            <li>已购买未付款<span style="background: #008573"></span></li>
                            <li>已购买未安葬<span style="background: #da765b"></span></li>
                            <li>使用中      <span style="background: #BF6A67"></span></li>
                            <li>等待退款    <span style="background: #f90"></span></li>
                            <li>续费提醒    <span style="background: #f00"></span></li>
                          </ul>'
        ];
        $this->assign('alert', $alert);
        $this->title = '墓位平面图';
        $category = $this->_getStorageCategoryTree();
        if ($category && isset($category[0]['children'])) {

            $category[0]['spread'] = true; // 默认展开第一个
            $parentCid = $category[0]['id'];
            $categoryId = $category[0]['children'][0]['id'];

            $parentCname = $this->_getCateNameById($parentCid);
            $categoryName = $this->_getCateNameById($categoryId);

            $data = $this->_getUrnsByCategoryID($categoryId);

            list($needRenewal,$available, $unavailable, $disabled, $destine, $total) = $this->_getUrnStatusArray($categoryId);
        }else {
            $data = [];
            $needRenewal = $available = $unavailable = $disabled = $destine = $total = $categoryId = 0;
            $parentCname = $categoryName = '';
        }
       
        $assignData = [
            'data' => $data,
            'title' => $this->title,
            'category' => json_encode($category),
            'needRenewal' => $needRenewal, // 获取续费提醒数量
            'available' => $available,
            'unavailable' => $unavailable,
            'disabled' => $disabled,
            'destine' => $destine,//预订的
            'total' => $total,
            'parentCname' => $parentCname,
            'categoryName' => $categoryName,
            'categoryId' => $categoryId
        ];

        if(is_mobile()){
            $categoryId=$this->request->param('id');
            $data = $this->_getUrnsByCategoryID($categoryId);
            $tomb = Db::name('CemeteryTomb')->where(['is_deleted'=>0,'create_by'=>$this->uid,'id'=> $categoryId])->order('sort desc,id desc')->find();
            $this->assign('tomb',$tomb);
            $this->assign('data',$data);
        }
        // 面包屑
        return $this->fetch('', $assignData);
    }

    /**
     * 获取位Ajax
     * @return array
     */
    public function ajaxGetUrn()
    {
        $cid = $this->request->param('cid');

        $data = $this->_getUrnsByCategoryID($cid);

        $parentCid = Db::name($this->tables)->where('id', $cid)->value('pid');

        $parentCname = $this->_getCateNameById($parentCid);
        $categoryName = $this->_getCateNameById($cid);

        list($needRenewal,$available, $unavailable, $disabled, $destine, $total) = $this->_getUrnStatusArray($cid);
        $assignData = [
            'data' => $data,
            'needRenewal' => $needRenewal, // 获取续费提醒数量
            'available' => $available,
            'unavailable' => $unavailable,
            'disabled' => $disabled,
            'destine' => $destine,
            'total' => $total,
            'parentCname' => $parentCname,
            'categoryName' => $categoryName,
            'categoryId' => $cid
        ];

        $resData = [
            'ret' => 1,
            'html' => $this->fetch('_urntree_list', $assignData)
        ];
        return $resData;
    }

    private function _getUrnsByCategoryID($categoryID)
    {


        $map = [
            'is_deleted'=>0,
            'status' => 1,
            'create_by' => $this->uid
        ];
        $data = Db::name($this->cemeterySnTable)->where('area_id', $categoryID)->where($map)->limit(1000)->select();
        foreach ($data as $key=>$value){
            $data[$key]['bury']=Db::name('cemetery_bury')->where('cemetery_sn',$value['cemetery_sn'])->value('status');
            $data[$key]['dead_name']=Db::name('cemetery_order')
                                        ->where([
                                            'cemetery_sn'=>$value['cemetery_sn'],
                                            'order_state' => ['<>',0]
                                        ])
                                        ->order('order_id','desc')->find();
            $data[$key]['order_state']=Db::name('cemetery_order')->where('cemetery_sn',$value['cemetery_sn'])->value('order_state');
        }
        return $data;
    }

    /***************************** 寄存位置管理 *****************************/

    /***************************** 墓穴信息管理 *****************************/
    public function ceinfo()
    {
        $this->title = '墓穴信息管理';
        $id = $this->request->param('id');
        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        $fee = DB::table('tp_cemetery')->where('id',$data['cemetery_id'])->find();
        $this->assign('Fee',$fee);
        $reservestate = DB::table('tp_business_finance')
                         ->where([
                            'cemetery_sn'=>$data['cemetery_sn'],
                            'order_source'=>0,
                         ])->value('order_state');
        $this->assign('ReserveState',$reservestate);

        //查询是否预定
        $cMap = [
            'cemetery_sn' => $data['cemetery_sn'],
            'order_state' => ['<>', 0]
        ];
        $order = Db::name('cemeteryOrder')->where($cMap)->order('order_id','desc')->select();
        
        if (!empty($order)){
            //获取用户信息
            foreach ($order as $value){
                $buyer_id1 = $value['buyer_id_1'];
                $buyer_id2 = $value['buyer_id_2'];
                $buyer1 = Db::name('Customer')->where('id',$buyer_id1)->find();

                $buyer2 = Db::name('Customer')->where('id',$buyer_id2)->find();

                //获取逝者信息
                $dead1=Db::name('storage_dead')->where('id', $value['deader_id_1'])->find();
                if ($data['type']==2){
                    $dead2=Db::name('storage_dead')->where('id', $value['deader_id_2'])->find();
                    $this->assign('dead2', $dead2);
                }
                //获取消费信息
                $consume=Db::name('cemetery_consume')->where('order_sn',$value['order_sn'])->select();
            }
            foreach ($consume as $va){
                $this->assign('va', $va);
            }
            $this->assign('dead1', $dead1);
            $this->assign('buyer1', $buyer1);
            $this->assign('buyer2', $buyer2);
            $this->assign('vo', $value);
        };

        $this->assign('cemeinfo', $data);
        if(empty($order)){

        }else{
            $this->assign('order', $order[0]);
        }
        return $this->fetch('', ['title' => $this->title]);
    }

    //预定墓穴
    public function reserve()
    {
        $this->title = '墓穴预定';
        $id = $this->request->param('id');

        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);

        //获取销售人员
        $cond = [
            'status' => 1,
            'create_by' => $this->uid
        ];
        $staff = Db::name('BusinessStaff')->where($cond)->select();
        foreach ($staff as $k=>$v){
            $staff[$k]['sector']=Db::name('BusinessAuth')->where('id',$v['sector'])->value('name');
        }
        if ($this->request->isPost()) {
            if(is_mobile()){
                $result = ajax_url_params_to_array($this->request->param('params'));
                (empty($result['reserve_time'])) && $this->error('预定时间不能为空');
                (empty($result['reserve_end_time'])) && $this->error('预定到期时间不能为空');
                (empty($result['username'])) && $this->error('姓名不能为空');
                (empty($result['deposit'])) && $this->error('定金金额不能为空');
                (empty($result['id_card'])) && $this->error('身份证号不能为空');
                (empty($result['phone'])) && $this->error('手机号码不能为空');
            }else{
                $result = input('post.');
            }

            if($result['seller'] == ''){
                $this->error('销售员不能为空');
            }
            if(!preg_match("/^1[34578]\d{9}$/", $result['phone1'])){
                $this->error('手机号1格式不对');
            }
            if(!preg_match("/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/i",$result['id_card1'])){
                $this->error('身份证号格式不对');
            }
            if($result['phone2'] != ''){
                if(!preg_match("/^1[34578]\d{9}$/", $result['phone2'])){
                    $this->error('手机号2格式不对');
                }
            }
            if($result['mail1'] != ''){
                if(!preg_match("/\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/",$result['mail1'])){
                    $this->error('邮箱1格式不对');
                }  
            }
            if($result['mail2'] != ''){
                if(!preg_match("/\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/",$result['mail2'])){
                    $this->error('邮箱1格式不对');
                }  
            }

            $buyer1 = [
                'username' => $result['username1'],
                'address' => $result['address1'],
                'work_address' => $result['work_address1'],
                'mail' => $result['mail1'],
                'id_card' => $result['id_card1'],
                'phone' => $result['phone1'],
                'plane' => $result['plane1'],
                'create_by' => $this->uid,
                'create_at' => time()
            ];

            $buyerId1 = Db::name('Customer')->insertGetId($buyer1);

            $buyer2 = [
                'username' => $result['username2'],
                'address' => $result['address2'],
                'work_address' => $result['work_address2'],
                'mail' => $result['mail2'],
                'id_card' => $result['id_card2'],
                'phone' => $result['phone2'],
                'plane' => $result['plane2'],
                'create_by' => $this->uid,
                'create_at' => time()
            ];
            $buyerId2=0;
            if(!empty($result['username2'])){
                $buyerId2 = Db::name('Customer')->insertGetId($buyer2);
            }


//            $orderSn=  $this->uid.date('Ym') . '_' .$res;
            $orderData = [
                'phone'=>$result['phone1'],
                'buyer_name_1' => $result['username1'],
                'buyer_id_1' => $buyerId1,
                'buyer_name_2' => $result['username2'],
                'buyer_id_2' => $buyerId2,
                'cemetery_sn' => $result['cemetery_sn'],
                'goods_name' => $result['goods_name'],
                'reserve_time' => $result['reserve_time'],
                'reserve_end_time' => $result['reserve_end_time'],
                'deposit' => $result['deposit'],
                'seller' => $result['seller'],
                'ship1_1' => $result['ship1_1'],
                'ship2_1' => $result['ship2_1'],
                'ship1_2' => $result['ship1_2'],
                'ship2_2' => $result['ship2_2'],
                'type'=>1,
//                'order_sn' => $orderSn,
                'create_at'=>time(),
                'create_by'=>$this->uid
            ];

            $res = Db::name('cemetery_order')->insertGetId($orderData);
            $osn= $this->uid.date('Ym') . '_' .$res;
            $orderSn=[
                'order_sn'=> $osn
            ];
            if($res){
                Db::name('cemetery_order')->where('order_id',$res)->update($orderSn);
            }

            $conMap=[
                'member_id'=>$buyerId1,
                'name'=>$result['username1'],
                'id_card'=>$result['id_card1'],
                'phone'=>$result['phone1'],
                'amount'=>$result['deposit'],
                'create_time'=>time(),
                'type'=>'墓位预定',
                'order_sn'=>$orderSn,
                'agent'=>$result['seller'],
                'create_by'=>$this->uid
            ];
            $ret=Db::name('cemetery_consume')->insert($conMap);
            if ($res) {
                $sta = [
                    'is_sell' => 2,
                    'this_state' => 1
                ];
                Db::name($this->cemeterySnTable)->where('cemetery_sn', $result['cemetery_sn'])->update($sta);
            }
            $finance=[
                'cemetery_sn'=>$result['cemetery_sn'],//墓穴编号
                'order_sn'=>$osn, //订单编号
                'buyer_id_card'=>$result['id_card1'],	//买家身份证号
                'buyer_name'=>$result['username1'],	//买家姓名
                'buyer_phone'=>$result['phone1']	,//买家手机
                'order_amount'=>$result['deposit'],//订单金额
                'add_time'=>time(),		//订单生成时间
                'seller'=>$result['seller'],
                'create_by'=>$this->uid		//创建者
            ];
            /*生成报表*/
            Db::name('business_finance')->data(['order_source'=>'0'])->insert($finance);
            /*生成报表*/
            if ($ret){
                // 成功 推送到微信号
//                $jssdk = new Jssdk();
//                $wx_content = "预定成功!墓穴编号为".$result['cemetery_sn']."订单编号为".$orderSn."客户姓名为".$result['username'];
//                $userInfo = Db::name('BusinessStaff')->where('id', 10019)->find();
//                $jssdk->push_msg($userInfo['wechat_openid'], $wx_content);


                $this->success('预定成功！', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $id . '?spm=' . $this->spm);
            }else {
                // 失败
                $this->error('保存失败，请稍候再试！');
            }
        }
        $this->assign('vo', $data);
        $this->assign('staff', $staff);
        return $this->fetch('', ['title' => $this->title]);
    }


    private function _getCemeteryInfo($id)
    {
        $map = [
            'status' => 1,
            'create_by' => $this->uid
        ];
        $data = Db::name($this->cemeterySnTable)->where('id', $id)->where($map)->find();
        if($data==null){
            $this->error('该墓位不存在');
        }else{
            return $data;
        }

    }

    /**
     * 墓位购买
     * @return mixed
     */
    public function ceBuy()
    {
        $this->title = '墓位购买';
        $id = $this->request->param('id');

        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        //获取预定信息
        $cMap = [
            'cemetery_sn' => $data['cemetery_sn'],
            'order_state' => ['<>', 0]
        ];
        $reserve = Db::name('cemetery_order')->where($cMap)->find();

        //获取客户信息
        $seller = Db::name('BusinessStaff')->where('id', $reserve['seller'])->value('name');

        if (!$reserve == null) {
            $reserve['seller_name'] = $seller;

            $buyer_id = $reserve['buyer_id_1'];
            $buyer1 = Db::name('Customer')->where('id', $buyer_id)->find();

            $buyer_id = $reserve['buyer_id_2'];
            $buyer2 = Db::name('Customer')->where('id', $buyer_id)->find();

            $this->assign('buyer1', $buyer1);
            $this->assign('buyer2', $buyer2);
        }
        //获取销售人员
        $cond = [
            'status' => 1,
            'create_by' => $this->uid
        ];
        $staff = Db::name('BusinessStaff')->where($cond)->select();
        foreach ($staff as $k=>$v){
            $staff[$k]['sector']=Db::name('BusinessAuth')->where('id',$v['sector'])->value('name');
        }

        if ($this->request->isPost()) {
            if(is_mobile()){
                $result = ajax_url_params_to_array($this->request->param('params'));
                (empty($result['deal_time'])) && $this->error('购买日期不能为空');
                (empty($result['end_time'])) && $this->error('到期时间不能为空');
                (empty($result['username'])) && $this->error('姓名不能为空');
                (empty($result['order_amount'])) && $this->error('应付金额不能为空');
                (empty($result['id_card'])) && $this->error('身份证号不能为空');
                (empty($result['phone'])) && $this->error('手机号码不能为空');
            }else{
                $result = input('post.');
            }
            if($result['seller'] == ''){
                $this->error('销售员不能为空');
            }
            if(!preg_match("/^1[34578]\d{9}$/", $result['phone1'])){
                $this->error('手机号1格式不对');
            }
            if(!preg_match("/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/i",$result['id_card1'])){
                $this->error('身份证号格式不对');
            }
            if($result['phone2'] != ''){
                if(!preg_match("/^1[34578]\d{9}$/", $result['phone2'])){
                    $this->error('手机号2格式不对');
                }
            }
            if($result['mail1'] != ''){
                if(!preg_match("/\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/",$result['mail1'])){
                    $this->error('邮箱1格式不对');
                }  
            }
            if($result['mail2'] != ''){
                if(!preg_match("/\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/",$result['mail2'])){
                    $this->error('邮箱1格式不对');
                }  
            }
            
//            if ($result['order_id'] == null) {
                $buyer1 = [
                    'username' => $result['username1'],
                    'address' => $result['address1'],
                    'work_address' => $result['work_address1'],
                    'mail' => $result['mail1'],
                    'id_card' => $result['id_card1'],
                    'phone' => $result['phone1'],
                    'plane' => $result['plane1'],
                    'create_by' => $this->uid,
                    'create_at' => time()
                ];

                if($result['buyer1_id'] !== ""){
                     Db::name('Customer')->where('id',$result['buyer1_id'])->update($buyer1);
                    $buyerId1 =$result['buyer1_id'];
                }else{
                    $buyerId1 = Db::name('Customer')->insertGetId($buyer1);
                }



                $buyer2 = [
                    'username' => $result['username2'],
                    'address' => $result['address2'],
                    'work_address' => $result['work_address2'],
                    'mail' => $result['mail2'],
                    'id_card' => $result['id_card2'],
                    'phone' => $result['phone2'],
                    'plane' => $result['plane2'],
                    'create_by' => $this->uid,
                    'create_at' => time()
                ];

                if($result['buyer2_id'] !== ""){
                    Db::name('Customer')->where('id',$result['buyer2_id'])->update($buyer2);
                    $buyerId2 =$result['buyer2_id'];
                }elseif(!empty($result['username2'])){
                    $buyerId2 = Db::name('Customer')->insertGetId($buyer2);
                }
                if (empty($buyerId2)){
                    $buyerId2=0;
                }


                $orderData = [
                    'phone'=>$result['phone1'],
                    'buyer_name_1' => $result['username1'],
                    'buyer_id_1' => $buyerId1,
                    'buyer_name_2' => $result['username2'],
                    'buyer_id_2' => $buyerId2,
                    'cemetery_sn' => $result['cemetery_sn'],
                    'goods_name' => $result['goods_name'],
                    'deal_time' => $result['deal_time'],
                    'end_time' => $result['end_time'],
                    'cemetery_id'=>$data['cemetery_id'],
                    // 'deposit' => $result['deposit'],
                    'seller' => $result['seller'],
                    'ship1_1' => $result['ship1_1'],
                    'ship2_1' => $result['ship2_1'],
                    'ship1_2' => $result['ship1_2'],
                    'ship2_2' => $result['ship2_2'],
                    'type'=>2,
                    'create_at'=>time(),
                    'create_by'=>$this->uid
                ];

                if ($result['order_id'] == null) {
                    $res = Db::name('cemetery_order')->insertGetId($orderData);
                    $osn= $this->uid.date('Ym') . '_' .$res;
                    $orderSn=[
                        'order_sn'=> $osn
                    ];
                    if($res){
                        Db::name('cemetery_order')->where('order_id',$res)->update($orderSn);
                    }
                }else{
                    $res = Db::name('cemetery_order')->where('order_id',$result['order_id'])->update($orderData);
                    $osn=Db::name('cemetery_order')->where('order_id',$result['order_id'])->value('order_sn');
                }


                $conMap=[
                    'member_id'=>$buyerId1,
                    'name'=>$result['username1'],
                    'id_card'=>$result['id_card1'],
                    'phone'=>$result['phone1'],
                    'amount'=>$result['order_amount'],
                    'create_time'=>time(),
                    'type'=>'墓位购买',
                    'order_sn'=>$osn,
                    'agent'=>$result['seller'],
                    'create_by'=>$this->uid
                ];
                $ret=Db::name('cemetery_consume')->insert($conMap);
                if ($res) {
                    $sta = [
                        'is_sell' => 1,
                        'is_move'=>1,
                        'this_state'=>3
                    ];
                    Db::name($this->cemeterySnTable)->where('cemetery_sn', $result['cemetery_sn'])->update($sta);
                }


               $finance=[
                    'cemetery_sn'=>$result['cemetery_sn'],//墓穴编号
                    'order_sn'=>$osn, //订单编号
                    'buyer_id_card'=>$result['id_card1'],	//买家身份证号
                    'buyer_name'=>$result['username1'],	//买家姓名
                    'buyer_phone'=>$result['phone1'],//买家手机
                    'add_time'=>time(),		//订单生成时间
                    'seller'=>$result['seller'],
                    'create_by'=>$this->uid		//创建者
               ];
               /*生成报表*/
               Db::name('business_finance')->data(['order_source'=>'1' ,'order_amount' => $result['order_amount']])->insert($finance);//墓穴订单
                /*生成报表*/

//            }

            if (!empty($result['packages'])) {
                $packages = $result['packages'];
                foreach ($packages as $pack){
                    $packageArr = explode('-', $pack);
                    $info=[
                        'pack_cost'=>$packageArr[2],
                        'pack_id'=>$packageArr[1],
                        'type'=>$packageArr[0],
                        'cemetery_sn'=>$result['cemetery_sn'],
                        'order_sn'=>$osn,
                    ];
                    // 插入数据
                    $repac=Db::name('cemetery_pack')->insert($info);
                }

            }


            $orderData = [
                'deal_time' => $result['deal_time'],
                'order_amount' => $result['order_amount'],
                'order_state' => 20
            ];

            $res = Db::name('cemetery_order')->where('order_sn', $osn)->update($orderData);
            if ($res) {
                $sta = [
                    'is_sell' => 1
                ];
                Db::name($this->cemeterySnTable)->where('cemetery_sn', $result['cemetery_sn'])->update($sta);
            }
            
            if($res !== false){
                $this->success('购买成功！', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $id . '?spm=' . $this->spm);
            }else{
                $this->error('保存失败，请稍候再试！');
            }
        }
        $this->package();

        $this->assign('vo', $data);
        $this->assign('res', $reserve);
        $this->assign('staff', $staff);
        return $this->fetch('cebuy', ['title' => $this->title]);
    }



    /**
     * 套餐内容
     */
    public function package()
    {
        $inscr_pack=Db::name('cemetery_combo')->where(['type'=>0,'create_by'=>$this->uid])->select();//刻碑套餐
        $bury_pack=Db::name('cemetery_combo')->where(['type'=>1,'create_by'=>$this->uid])->select();//安葬套餐
        $stor_pack=Db::name('cemetery_combo')->where(['type'=>2,'create_by'=>$this->uid])->select();//寄存套餐
        $oth_pack=Db::name('cemetery_combo')->where(['type'=>3,'create_by'=>$this->uid])->select();//其他套餐
        $this->assign('inscr_pack',$inscr_pack);
        $this->assign('bury_pack',$bury_pack);
        $this->assign('stor_pack',$stor_pack);
        $this->assign('oth_pack',$oth_pack);
    }

    /**
     * 使用者信息登记
     */
    public function deadRegister()
    {
        if ($this->request->isPost()) {
            $result = input('post.');
            //获取订单信息
            $reserve = Db::name('cemetery_order')
                         ->where('cemetery_sn', $result['cemetery_sn'])
                         ->where('order_state','<>','0')
                         ->where('order_state','<>','30')
                         ->order('order_id desc')->find();
            $deader_1 = [
                'dead_name' => $result['dead_name_1'],
                'dead_id_card' => $result['dead_id_card_1'],
                'sex' => $result['sex_1'],
                'age' => $result['age_1'],
                'dead_birthday' => $result['dead_birthday_1'],
                'dead_deadday' => $result['dead_deadday_1'],
                'dead_domicile' => $result['dead_domicile_1'],
                'dead_nation' => $result['dead_nation_1'],
                'address' => $result['dead_address_1'],
                'create_by' => $this->uid,
                'create_at' => time(),
                'cemetery_sn' => $result['cemetery_sn']
            ];
            $ret1 = Db::name('storage_dead')->insertGetId($deader_1);

            if ($result['type'] == 2) {
                $deader_2 = [
                    'dead_name' => $result['dead_name_2'],
                    'dead_id_card' => $result['dead_id_card_2'],
                    'sex' => $result['sex_2'],
                    'age' => $result['age_2'],
                    'dead_birthday' => $result['dead_birthday_2'],
                    'dead_deadday' => $result['dead_deadday_2'],
                    'dead_domicile' => $result['dead_domicile_2'],
                    'dead_nation' => $result['dead_nation_2'],
                    'address' => $result['dead_address_2'],
                    'create_by' => $this->uid,
                    'create_at' => time(),
                    'cemetery_sn' => $result['cemetery_sn']
                ];
                $ret2 = Db::name('storage_dead')->insertGetId($deader_2);
            }

            if ($result['type'] == 2) {
                $deader = [
                    'dead_id_card1' => $result['dead_id_card_1'],
                    'cemetery_id_card'=>$result['cemetery_id_card'],
                    'deader_name_1' => $result['dead_name_1'],
                    'deader_name_2' => $result['dead_name_2'],
                    'deader_id_1' => $ret1,
                    'deader_id_2' => $ret2
                ];
            }else{
                $deader = [
                    'dead_id_card1' => $result['dead_id_card_1'],
                    'cemetery_id_card'=>$result['cemetery_id_card'],
                    'deader_name_1' => $result['dead_name_1'],
                    'deader_id_1' => $ret1,
                ];
            }
            $res = Db::name('cemeteryOrder')->where('order_id', $reserve['order_id'])->update($deader);
            $res !== false ? $this->success('使用者信息登记成功！', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $result['cemetery_id'] . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
        }

    }



    /**
     * 安葬登记
     */
    /*
    public function ceRegister()
    {
        $this->title = '安葬登记';
        $id = $this->request->param('id');
        // dump($id);die;
        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        $this->assign('vo', $data);
        // print_r($data);die;
        //获取选择的套餐
        $inscrpack=Db::name('cemetery_pack')->where(['cemetery_sn'=>$data['cemetery_sn'],'type'=>1])->select();
        $pack = [];
        foreach ($inscrpack as $k=>$value){
            $pack[] =Db::name('cemetery_combo')->where('id',$value['pack_id'])->find();
        }
        // print_r($inscrpack);die;
        $this->assign('pack',$pack);


        //获取订单信息
        $reserve = Db::name('cemetery_order')->where('cemetery_sn', $data['cemetery_sn'])->find();
        // print_r($reserve);die;
        //获取使用者信息
        $dead1=Db::name('storage_dead')->where('id', $reserve['deader_id_1'])->find();
        if ($data['type']==2){
            $dead2=Db::name('storage_dead')->where('id',$reserve['deader_id_2'])->find();
            $this->assign('dead2', $dead2);
        }
        //获取客户信息
        $seller = Db::name('BusinessStaff')->where('id', $reserve['seller'])->value('name');

        if (!$reserve == null) {
            $reserve['seller'] = $seller;

            $buyer_id = $reserve['buyer_id_1'];
            $buyer = Db::name('Customer')->where('id', $buyer_id)->find();
            $this->assign('buyer', $buyer);
        }

        //获取销售人员
        $cond = [
            'status' => 1,
            'create_by' => $this->uid
        ];
        $staff = Db::name('BusinessStaff')->where($cond)->select();
        if ($this->request->isPost()) {
            if(is_mobile()){
                $result = ajax_url_params_to_array($this->request->param('params'));
                (empty($result['cost'])) && $this->error('支付金额不能为空');
                (empty($result['dead_birthday_1'])) && $this->error('安葬时间不能为空');
                (empty($result['dead_id_card_1'])) && $this->error('火化证编号不能为空');
                (empty($result['cemetery_id_1'])) && $this->error('墓穴证编号不能为空');
                (empty($result['id_card'])) && $this->error('身份证号不能为空');
                (empty($result['phone'])) && $this->error('手机号码不能为空');
            }else{
                $result = input('post.');
            }


            $deader_1 = [
                'id'=>$result['dead_id_1'],
                'dead_name' => $result['dead_name_1'],
                'dead_id_card' => $result['dead_id_card_1'],
                'sex' => $result['sex_1'],
                'age' => $result['age_1'],
                'dead_birthday' => $result['dead_birthday_1'],
                'dead_deadday' => $result['dead_deadday_1'],
                'dead_domicile' => $result['dead_domicile_1'],
                'dead_nation' => $result['dead_nation_1'],
                'address' => $result['dead_address_1'],
                'create_by' => $this->uid,
                'create_at' => time(),
                'cemetery_sn' => $result['cemetery_sn'],
                'cemetery_id'=> $result['cemetery_id_1']
            ];

            if ($data['type'] == 2) {
                $deader_2 = [
                    'id'=>$result['dead_id_2'],
                    'dead_name' => $result['dead_name_2'],
                    'dead_id_card' => $result['dead_id_card_2'],
                    'sex' => $result['sex_2'],
                    'age' => $result['age_2'],
                    'dead_birthday' => $result['dead_birthday_2'],
                    'dead_deadday' => $result['dead_deadday_2'],
                    'dead_domicile' => $result['dead_domicile_2'],
                    'dead_nation' => $result['dead_nation_2'],
                    'address' => $result['dead_address_2'],
                    'create_by' => $this->uid,
                    'create_at' => time(),
                    'cemetery_sn' => $result['cemetery_sn'],
                    'cemetery_id'=> $result['cemetery_id_2']
                ];
            }
            $ret1 = Db::name('storage_dead')->update($deader_1);
            if ($data['type'] == 2) {
                $ret2 = Db::name('storage_dead')->update($deader_2);
            }

            $bury=[
              'cost'=>$result['cost'],
              'update_at'=>time(),
               'status'=>1
            ];
            Db::name('cemetery_bury')->where('cemetery_sn',$result['cemetery_sn'])->update($bury);

            $finance=[
                'order_amount'=>$result['cost'],
                'order_state'=>20
            ];
            $fin=Db::name('business_finance')->where(['order_sn'=>$result['order_sn'],'order_source'=>'安葬订单'])->update($finance);

            $conData=[
                'member_id'=>$reserve['buyer_id_1'],
                'name'=>$result['username'],
                'id_card'=>$result['id_card'],
                'phone'=>$result['phone'],
                'amount'=>$result['cost'],
                'create_time'=>date('Ymd'),
                'type'=>'安葬登记',
                'order_sn'=>$result['order_sn'],
                'agent'=>$result['seller'],
                'create_by'=>$this->uid
            ];
            $coninfo=Db::name('cemetery_consume')->where('order_sn',$result['order_sn'])->find();
            if(isset($coninfo)){
                Db::name('cemetery_consume')->insert($conData);
            }else{
                Db::name('cemetery_consume')->where('id',$coninfo['id'])->update($conData);
            }


            
            if ($data['type'] == 2) {
                $deader = [
                    'cemetery_id'=> $result['cemetery_id_1'],
                    'deader_name_1' => $result['dead_name_1'],
                    'deader_name_2' => $result['dead_name_2'],
                    'order_state'=>30
                ];
            }else{
                $deader = [
                    'cemetery_id'=> $result['cemetery_id_1'],
                    'deader_name_1' => $result['dead_name_1'],
                    'order_state'=>30
                ];
            }
            $res = Db::name('cemeteryOrder')->where('order_id', $reserve['order_id'])->update($deader);
//            $cere=Db::name('cemeteryOrder')->where('cemetery_sn', $reserve['cemetery_sn'])->update('is_move',1);
            $res !== false ? $this->success('安葬手续办理成功！', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $id . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
        }
        $this->assign('dead1', $dead1);
        $this->assign('seller',$seller);
        
        $this->assign('staff', $staff);
        $this->assign('reser',$reserve);
        return $this->fetch('', ['title' => $this->title]);
    }
    */


    /**
     * [确认安葬]
     */
    public function ceRegister(){
        $id = input('id');
        $cemetery_sn = DB::table('tp_cemetery_bury')->where('id',$id)->order('id','desc')->value('cemetery_sn');
        if($cemetery_sn == ''){
            $this->error('安葬信息不全!');
        }
        DB::startTrans();
        try {
            DB::table('tp_cemetery_bury')->where('id',$id)->update(['status'=>1]);
            DB::table('tp_cemetery_sn')->where('cemetery_sn',$cemetery_sn)->update(['this_state'=>5]);
            Db::commit();
            return ['code'=>1,'msg'=>'确认成功'];
        } catch (Exception $e) {
            Db::rollback();
            return ['code'=>0,'msg'=>'确认失败'];
        }
    }

    /**
     * 墓位取走
     */
    public function ceRemove()
    {
        $this->title = '墓位取走';
        $id = $this->request->param('id');

        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        //获取订单信息
        $reserve = Db::name('cemetery_order')->where('cemetery_sn', $data['cemetery_sn'])->find();
        //获取客户信息
        $seller = Db::name('BusinessStaff')->where('id', $reserve['seller'])->value('name');
        if (!$reserve == null) {
            $reserve['seller'] = $seller;

            $buyer_id = $reserve['buyer_id_1'];
            $buyer = Db::name('Customer')->where('id', $buyer_id)->find();
            $this->assign('buyer', $buyer);
        }
        if ($this->request->isPost()) {
            $result = input('post.');
            $cemetery_id = $result['cemetery_sn'];
            $ce = [
                'is_sell' => 0,
                'is_move' => 0,
                'this_state' => 0
            ];
            DB::startTrans();
            try {
                $ret = Db::name($this->cemeterySnTable)->where('cemetery_sn', $cemetery_id)->update($ce);
                $deader_1 = $result['deader_id_1'];
                $deader_2 = $result['deader_id_2'];
                $map = [
                    'cemetery_sn' => ''
                ];
                $de1 = Db::name('storage_dead')->where('id', $deader_1)->update($map);
                if ($result['type'] == 2) {
                    Db::name('storage_dead')->where('id', $deader_2)->update($map);
                }
                $oMap=[
                    'order_state'=>0
                ];
                $orders=Db::name('cemetery_order')->where('cemetery_sn', $data['cemetery_sn'])->update($oMap);
                Db::commit();
                $this->success('墓位取走手续办理成功！', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $id . '?spm=' . $this->spm);
            } catch (Exception $e) {
                Db::rollback();
                $this->error('保存失败，请稍候再试！');
            }
        }
        $this->assign('vo', $data);
        $this->assign('res', $reserve);
        return $this->fetch('', ['title' => $this->title]);
    }

    /**
     * 墓位退款
     */
    public function ceRefund()
    {
        $this->title = '墓位退款';
        $id = $this->request->param('id');

        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        //获取订单信息
        $reserve = Db::name('cemetery_order')->where('cemetery_sn', $data['cemetery_sn'])->order('order_id','desc')->find();

        //获取客户信息
        $seller = Db::name('BusinessStaff')->where('id', $reserve['seller'])->value('name');
        if (!$reserve == null) {
            // $reserve['seller'] = $seller;

            $buyer_id = $reserve['buyer_id_1'];
            $buyer = Db::name('Customer')->where('id', $buyer_id)->find();
            $this->assign('buyer', $buyer);
        }

        if ($this->request->isPost()) {
            $result = input('post.');
            $result['refund'] = -(float)$result['refund'];
            $finance=[
                'cemetery_sn'=>$reserve['cemetery_sn'],
                'order_sn'=>$reserve['order_sn'], //订单编号
                'buyer_id_card'=>$reserve['buyer_id_1'],	//买家身份证号
                'buyer_name'=>$reserve['buyer_name_1'],	//买家姓名
                'buyer_phone'=>$reserve['phone']	,//买家手机
                'seller'=>$reserve['seller'],
                'add_time'=>time(),		//订单生成时间
                'create_by'=>$this->uid	,	//创建者
            ];
            DB::startTrans();
            try {
                $state = DB::table('tp_cemetery_sn')->where('cemetery_sn',$reserve['cemetery_sn'])->value('this_state');
                $state = '6'.$state;
                Db::name('business_finance')->data(['order_source'=>'4' ,'order_amount' =>$result['refund']])->insert($finance);
                DB::table('tp_cemetery_sn')->where('cemetery_sn',$reserve['cemetery_sn'])->update(['this_state'=>$state]);
                Db::commit();
                $this->success('已提交财务，等待财务收款！');
            } catch (Exception $e) {
                Db::rollback();
                $this->error('申请退款失败，请稍后');
            }
        }
        $this->assign('vo', $data);
        $this->assign('res', $reserve);
        return $this->fetch('', ['title' => $this->title]);
    }

    /**
     * 年费续期
     */
    public function ceExpire()
    {
        $this->title = '年费续期';
        $id = $this->request->param('id');

        //获取销售人员
        $cond = [
            'status' => 1,
            'create_by' => $this->uid
        ];
        $staff = Db::name('BusinessStaff')->where($cond)->select();
        //获取墓位信息
        $data = $this->_getCemeteryInfo($id);
        //获取预定信息
        $cMap = [
            'cemetery_sn' => $data['cemetery_sn'],
            'order_state' => ['<>', 0]
        ];
        $reserve = Db::name('cemetery_order')->where($cMap)->find();
        //获取客户信息
        $seller = Db::name('BusinessStaff')->where('id', $reserve['seller'])->value('name');
        if (!$reserve == null) {
            $reserve['seller'] = $seller;

            $buyer_id = $reserve['buyer_id_1'];
            $buyer = Db::name('Customer')->where('id', $buyer_id)->find();
            $this->assign('buyer', $buyer);
        }
        if ($this->request->isPost()) {
            $result = input('post.');
            // $renew=[
            //     'end_time'=>$result['end_time']
            // ];
            // $res=Db::name('cemetery_order')->where('order_sn',$result['order_sn'])->update($renew);
            $Fdata = [
                'order_sn' => $result['order_sn'],
                'buyer_name' => $result['username'],
                'buyer_id_card' => $result['id_card'],
                'buyer_phone' => $result['phone'],
                'add_time' => time(),
                'order_amount' => $result['amount'],
                'order_state' => 20,
                'create_by' => $this->uid,
                'cemetery_sn' => $result['cemetery_sn'],
                'order_source' => 5,
                'seller' => $result['agent'],
                'desc' => $result['end_time']
            ];
            $res = DB::table('tp_business_finance')->insert($Fdata);


            $conMap=[
                'name'=>$result['username'],
                'id_card'=>$result['id_card'],
                'phone'=>$result['phone'],
                'amount'=>$result['amount'],
                // 'start_time'=>$result['start_time'],
                // 'end_time'=>$result['end_time'],
                'create_time'=>$result['renew_time'],
                'type'=>'年费续费',
                'order_sn'=>$result['order_sn'],
                // 'vaild'=>$result['year'],
                'agent'=>$result['agent'],
                'create_by'=>$this->uid
            ];
            $ret=Db::name('cemetery_consume')->insert($conMap);
            $res && $ret !== false ? $this->success('续费手续办理成功，等待财务收款', url('/') . 'business.html#' . url('cemetery/ceinfo') . '?id=' . $id . '?spm=' . $this->spm) : $this->error('保存失败，请稍候再试！');
        }
        $this->assign('vo', $data);
        $this->assign('res', $reserve);
        $this->assign('staff', $staff);
        return $this->fetch('', ['title' => $this->title]);
    }
}