<?php
// +----------------------------------------------------------------------
// | Ht.Memorial
// +----------------------------------------------------------------------
// | Copyright (c) 2017-2017 http://www.yn123.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: ding <dingzhangze@163.com>
// +----------------------------------------------------------------------

namespace app\business\controller;

    use app\business\service\DataService;
    use app\business\service\ToolsService;
    use think\Db;

    /**
     * 财务管理
     * Class Inscription
     * @package app\business\controller
     * @author ding <dingzhangze@163.com>
     * @date 2017/8/10
     */
class Finance extends BasicBusiness
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user = session('b_user');
        $this->uid = $this->user['create_by'];
    }

    /**
     * 指定当前数据表
     * @var string
     */
    protected $table = 'business_finance';

    /**
     * 财务列表列表
     */
    public function index()
    {
        $this->title = '财务流水管理';
        $_menu=Db::name($this->table)->column('order_source');
        $menu=array_values(array_unique($_menu));
        // 获取到所有GET参数
        $get = $this->request->get();
        // print_r($get);die;
        $db = Db::name($this->table)->order('id desc'); 
        // unset($get['member_name']);
        // 根据分类搜索
        if (isset($get['cid']) && $get['cid'] !== '' && $get['cid'] != '-1') {
            // $cateIds = $this->_searchByCategory($get['cid']);
            $db->where('order_source', $get['cid'])->where('create_by', $this->uid);
        } else {
            // 实例Query对象
            $db->where('create_by', $this->uid);
        }

        // $db = Db::name($this->table)->where('create_by', $this->uid);
        // 应用搜索条件
        foreach (['order_sn','cemetery_sn'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }
        $this->assign('menu',$menu);

        // 实例化并显示
        $data = parent::_list($db, true, false);


        #  客户姓名搜索 : unset掉不符合客户姓名搜索条件的 $data['list']
        if(isset($get['buyer_name']) && $get['buyer_name'] != ''){
            foreach($data['list'] as $k => $v){
                $pos  =  strpos ( strtoupper($v['buyer_name']),strtoupper($get['buyer_name']));
                if ( $pos  ===  false ) {
                    $bool = false;
                }else{
                    $bool = true;
                }
                if(!$bool){
                    unset($data['list'][$k]);
                }
            }
        }
        #  销售员姓名搜索 : 
        #       由搜索的姓名获取该销售员ID，比对ID和$data['list'][$k]['seller']，
        #       一致的放入$arr,循环完毕赋值$data['list'] = $arr;
        if(isset($get['seller']) && $get['seller'] != ''){
            $suName = $get['seller'];
            $seller_id = DB::table('tp_business_staff')->where('name','like','%'.$suName.'%')->select();
            $arr = [];
            foreach($data['list'] as $k => $v){
                foreach ($seller_id as $ke => $vo) {
                    if($v['seller'] == $vo['id']){
                        $arr[$k] = $data['list'][$k];
                    }
                }
            }
            $data['list'] = $arr;
        }

        foreach ($data['list'] as $key => $list) {
            $data['list'][$key]['seller'] = Db::name('business_staff')->where('id', $list['seller'])->value('name');
            $cecemetery_id_card[$key] = DB::table('tp_cemetery_order')->where('order_sn',$list['order_sn'])->value('cemetery_id_card');
            if($cecemetery_id_card[$key] == ''){
                $data['list'][$key]['cemetery_id_card'] = 0;
            }else{


                $data['list'][$key]['cemetery_id_card'] = 1;
            }
            $data['list'][$key]['buy_type'] = DB::table('tp_cemetery_order')->where('order_sn',$list['order_sn'])->value('type');
        }
        return $this->fetch('', $data);

//        parent::_list($db, false);
    }

    /**
     * 填写墓穴证编号
     */
    public function CeIdCard(){  
        if($this->request->isPost()) {
            $cemetery_id_card = input('dead_id_card');
            $order_sn = input('order_sn');
            $data = [
                'cemetery_id_card'=>$cemetery_id_card
            ];
            if(DB::table('tp_cemetery_order')->where('order_sn',$order_sn)->update($data)){
                return ['code'=>1,'msg'=>'填写成功'];
            }else{
                return ['code'=>0,'msg'=>'填写失败'];
            }
        }else{
            $arr_id = explode('-',input('id'));
            $id = $arr_id[1];
            $order_sn = $arr_id[0];
            $this->assign('order_sn',$order_sn);
            return $this->fetch();
        }
        
    }
    /**
     * 收款
     */
    public function cheques()
    {
        if($this->request->isPost()) {
            $id = input('post.id');
            $idArr = explode('-', $id);
            $type = Db::name($this->table)->where('id', $idArr['1'])->value('order_source');
            if ($type == 0 || $type==1) {// 预定、购买
                $this_state = 0;
                $orderType = Db::name('cemetery_order')->where('order_sn', $idArr['0'])->order('order_id','desc')->value('type');
                $cemetery_sn = Db::name('cemetery_order')->where('order_sn', $idArr['0'])->order('order_id','desc')->value('cemetery_sn');
                if ($orderType == 2) {// 购买
                    $this_state = 4;
                    $orderBuy = Db::name('cemetery_order')->where('order_sn', $idArr['0'])->update(['order_state' => 21]);
                    $utime = Db::name($this->table)->where('id', $idArr['1'])->update(['order_state' => 30, 'finnshed_time' => time(),'pay_type'=>input('post.pay_type'),'desc'=>input('post.desc')]);
                } elseif($orderType == 1) { //预定
                    $this_state = 2;
                    $orderBuy = Db::name('cemetery_order')->where('order_sn', $idArr['0'])->update(['order_state' => 11]);
                    $utime = Db::name($this->table)->where('id', $idArr['1'])->update(['order_state' => 30, 'finnshed_time' => time(),'pay_type'=>input('post.pay_type'),'desc'=>input('post.desc')]);
                }
                $res = DB::table('tp_cemetery_sn')->where('cemetery_sn',$cemetery_sn)->update(['this_state'=>$this_state]);
                if ($utime && $orderBuy && $res) {
                    $this->success("付款成功！", '');
                }
                $this->error("付款失败，请稍候再试！");
            }elseif($type == 4){// 退款
                $state = Db::name($this->table)->where('id', $idArr['1'])->value('order_state');
                if($state != 40){
                    $this->error('没有授权退款');
                }
                $ForderSn = Db::name($this->table)->where('id', $idArr['1'])->value('order_sn');
                $Frefund = Db::name($this->table)->where('id', $idArr['1'])->value('order_amount');
                if($ForderSn == ''){
                    $this->error('该订单不存在');
                }
                $Corder = DB::table('tp_cemetery_order')->where('order_sn',$ForderSn)->find();
                $order=[
                    'order_state'=>0,
                    'refund'=>$Frefund,
                    'refund_time'=>date('Y-m-d',time())
                ];
                $cesell=[
                  'is_sell'=>0,
                  'this_state'=>0
                ];
                DB::startTrans();
                try {
                    Db::table('tp_cemetery_order')->where('order_sn',$ForderSn)->update($order);
                    Db::table('tp_cemetery_sn')->where('cemetery_sn',$Corder['cemetery_sn'])->update($cesell);
                    Db::name($this->table)->where('id', $idArr['1'])->update([
                        'order_state' => 30,
                        'finnshed_time' => time(),
                        'pay_type'=>input('post.pay_type'),
                        'desc'=>input('post.desc')
                    ]);
                    Db::commit();
                    $this->success("付款成功！", '');
                } catch (Exception $e) {
                    Db::rollback();
                    $this->error("付款失败，请稍候再试！");
                }                
            }elseif($type == 5){// 续费
                $EndTime = Db::name($this->table)->where('id', $idArr['1'])->value('desc');
                $ForderSn = Db::name($this->table)->where('id', $idArr['1'])->value('order_sn');
                DB::startTrans();
                try {
                    Db::name('cemetery_order')->where('order_sn',$ForderSn)->update(['end_time'=>$EndTime]);
                    Db::name($this->table)->where('id', $idArr['1'])->update([
                        'order_state' => 30,
                        'finnshed_time' => time(),
                        'pay_type'=>input('post.pay_type'),
                        'desc'=>input('post.desc')
                    ]);
                    Db::commit();
                    $this->success("付款成功！", '');
                } catch (Exception $e) {
                    Db::rollback();
                    $this->error("付款失败，请稍候再试！");
                }         
            }else{ // 安葬、刻碑
                $utime = Db::name($this->table)->where('id', $idArr['1'])->update(['order_state' => 30, 'finnshed_time' => time(),'pay_type'=>input('post.pay_type'),'desc'=>input('post.desc')]);
                if ($utime) {
                    $this->success("付款成功！", '');
                }
                $this->error("付款失败，请稍候再试！");
            }
        }
        return $this->fetch('');

    }



    /**
     * 删除订单
     */
    public function del()
    {
        if (DataService::update($this->table)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /**
     * 订单详情
     * @return mixed
     */
    public function showOrder()
    {

        $this->assign('title', '订单详情');
        $orderId = $this->request->param('id');
        $orderInfo = Db::name($this->table)->where('id', $orderId)->find();
        $seller=Db::name('business_staff')->where('id',$orderInfo['seller'])->find();

        $this->assign('seller', $seller);
        $this->assign('orderInfo', $orderInfo);
        return $this->fetch('showorder');
    }



    /**
     * 订单流水
     */
    public function stream()
    {
        $_menu=Db::name($this->table)->column('order_source');
        $menu=array_values(array_unique($_menu));


        // 获取到所有GET参数
        $get = $this->request->get();
        if($get['id']==0){
            $this->title = '公墓预售流水管理';
        }elseif ($get['id']==1){
            $this->title = '公墓购买流水管理';
        }elseif ($get['id']==2){
            $this->title = '碑文流水管理';
        }elseif ($get['id']==3){
            $this->title = '安葬流水管理';
        }elseif ($get['id']==4){
            $this->title = '退款及异常流水';
        }

        $db = Db::name($this->table)->order('id desc');
        // 根据分类搜索
        if (isset($get['cid']) && $get['cid'] !== '' && $get['cid'] != '-1') {
//            $cateIds = $this->_searchByCategory($get['cid']);

            $db = Db::name($this->table)->where('order_source', $get['cid'])->where('create_by', $this->uid);
        } else {
            // 实例Query对象
            $db = Db::name($this->table)->where('order_source',$get['id'])->where('create_by', $this->uid);
        }

//        $db = Db::name($this->table)->where('create_by', $this->uid);
        // 应用搜索条件
        foreach (['order_sn', 'member_name','cemetery_sn'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }
        $this->assign('menu',$menu);
        // 实例化并显示
        parent::_list($db, false);

    }


    /**
     * [销售额统计]
     */
    public function statistics(){
        $start_time = strtotime(input('start_time'));
        $end_time = strtotime(input('end_time'));
        $order_source = input('order_source');
        $seller = input('seller');
        $page_size = input('page_size');
        if(!$page_size){
            $page_size = 20;
        }
        if($order_source == ''){
            $whereOrderSource = '';
        }else{
            $whereOrderSource = [
                'order_source' => $order_source
            ];
        }
        if($start_time == '' || $end_time == ''){
            $start_time = strtotime(date('Ymd',strtotime('-12 month')));
            $end_time = strtotime(date('Ymd',strtotime('+1 day')));
        }

        if($seller == ''){
            $list = DB::table('tp_business_finance')->where('order_state',30)
                  ->where('add_time','>=',$start_time)
                  ->where('add_time','<',$end_time)
                  ->where('create_by',$this->uid)
                  ->where($whereOrderSource)
                  ->order('add_time desc')
                  ->paginate($page_size,false,[
                    'query' => request()->param(),//保留参数
                    'page' => input('page'),
                    'path' => "#/business/finance/statistics?start_time=" . $start_time . '&end_time=' . $end_time . '&page_size=' . $page_size .'&page=[PAGE]'
                  ]);
            $sum = DB::table('tp_business_finance')->where('order_state',30)
                      ->where('add_time','>=',$start_time)
                      ->where('add_time','<',$end_time)
                      ->where('create_by',$this->uid)
                      ->where($whereOrderSource)
                      ->sum('order_amount');
        }else{
            $seller_ids = DB::table('tp_business_staff')->where('name','like','%'.$seller.'%')->field('id')->select();
            if(empty($seller_ids)){
                $this->error('没有该销售员');
            }
            $list = DB::table('tp_business_finance')->where('order_state',30)
                  ->where('add_time','>=',$start_time)
                  ->where('add_time','<',$end_time)
                  ->where('create_by',$this->uid)
                  ->where($whereOrderSource)
                  ->order('add_time desc')
                  ->where(function($query)use($seller_ids){
                        foreach ($seller_ids as $key => $value) {
                            $query->whereOr('seller', $value['id']);
                        }
                    })
                  ->paginate($page_size,false,[
                    'query' => request()->param(),//保留参数
                    'page' => input('page'),
                    'path' => "#/business/finance/statistics?start_time=" . $start_time . '&end_time=' . $end_time . '&page_size=' . $page_size . '&page=[PAGE]'
                  ]);
            $sum = DB::table('tp_business_finance')->where('order_state',30)
                      ->where('add_time','>=',$start_time)
                      ->where('add_time','<',$end_time)
                      ->where('create_by',$this->uid)
                      ->where($whereOrderSource)
                      ->where(function($query)use($seller_ids){
                            foreach ($seller_ids as $key => $value) {
                                $query->whereOr('seller', $value['id']);
                            }
                        })
                      ->sum('order_amount');
        }
        
        $seller_name = [];
        foreach($list as $k => $v){
            $seller_name[$k] = DB::table('tp_business_staff')->where(['id'=>$v['seller']])->value('name');
        }
        $this->assign('SUM',$sum);
        $this->assign('SellerName',$seller_name);
        $this->assign('List',$list);
        $this->assign('startTime',$start_time);
        $this->assign('endTime',$end_time);
        $page = $list->render();
        $this->assign('page', $page);
        return $this->fetch("",['title'=>'销售额统计']);
    }


    /**
     * [销售额弹窗图表]
     */
    function content_1(){
        //获取选择和对比的时间段的 时间 和 时间戳
        $val1 = input('val1');
        $red_time = explode('/',$val1);
        $red_time_s = $red_time[0];
        $red_time_e = $red_time[1];
        $blue_time_s = input('val2');
        $reduce_time_l = abs(strtotime($red_time_e) - strtotime($red_time_s));
        $blue_time_e_l = strtotime($blue_time_s) + $reduce_time_l;
        $blue_time_e = date('Y-m-d',$blue_time_e_l);
        $red_time_s_l = strtotime($red_time_s);
        $red_time_e_l = strtotime($red_time_e);
        $blue_time_s_l = strtotime($blue_time_s);

        
        //把时间段每个月分化
        $m = 0;
        for($i = $red_time_s_l; $i <= $red_time_e_l; $i += 24*3600){
            $x_data[$m] = date('Y-m-d',$i);
            $m++;
        }

        $j = 0;
        for($i = $blue_time_s_l; $i <= $blue_time_e_l; $i += 24*3600){
            $x_data_b[$j] = date('Y-m-d',$i);
            $j++;
        }
        foreach($x_data as $k => $v){
            $data1[$k] = DB::table('tp_business_finance')
                      ->where('order_state',30)
                      ->where('add_time','>=',strtotime($v))
                      ->where('add_time','<',(strtotime($v) + 24*3600))
                      ->where('create_by',$this->uid)
                      ->sum('order_amount');
            if($data1[$k] == ''){
                $data1[$k] = 0;
            }
        }
        foreach($x_data_b as $k => $v){
            $data2[$k] = DB::table('tp_business_finance')
                      ->where('order_state',30)
                      ->where('add_time','>=',strtotime($v))
                      ->where('add_time','<',(strtotime($v) + 24*3600))
                      ->where('create_by',$this->uid)
                      ->sum('order_amount');
            if($data2[$k] == ''){
                $data2[$k] = 0;
            }
        }
        // $red_data = $this->getEchartsData($red_time_s_l,$red_time_e_l);
        // $blue_data = $this->getEchartsData($blue_time_s_l,$blue_time_e_l);
        // $x_data = [];
        // $data1 = [];
        // $data2 = [];
        // foreach($red_data as $k => $v){
        //     $x_data[$k] = $v['gap'];
        //     $data1[$k] = $v['num'];
        // }
        // foreach($blue_data as $ke => $vo){
        //     $data2[$ke] = $vo['num'];
        // }

        $this->assign('RedS',$red_time_s_l);
        $this->assign('RedE',$red_time_e_l);
        $this->assign('BlueS',$blue_time_s_l);
        $this->assign('BlueE',$blue_time_e_l);
        $this->assign('Xdata',$x_data);
        $this->assign('data1',$data1);
        $this->assign('data2',$data2);
        return $this->fetch();
    }

    // public function getEchartsData($start_time=0,$end_time=0){
    //     $sql = "SELECT SUM(`order_amount`) as num ,
    //             FROM_UNIXTIME(`add_time`,'%Y-%m-%d') as gap FROM `tp_business_finance` 
    //             WHERE `add_time` >= " . $start_time . " and  `add_time` <= " . $end_time . "
    //             group by gap";
    //     return DB::query($sql);
    // }

    /**
     * [退款信息]
     */
    public function showrefund(){
        $id = input('get.id');
        $financeInfo = DB::table('tp_business_finance')->where('id',$id)->find();
        if(empty($financeInfo)){
            $this->error('该订单信息丢失');
        }
        $cemeterySnInfo = DB::table('tp_cemetery_sn')->where('cemetery_sn',$financeInfo['cemetery_sn'])->find();
        $orderInfo = DB::table('tp_cemetery_order')->where('order_sn',$financeInfo['order_sn'])->find();
        $buyerInfo = DB::table('tp_customer')->where('id',$orderInfo['buyer_id_1'])->find();
        $this->assign('cemeterySnInfo',$cemeterySnInfo);
        $this->assign('financeInfo',$financeInfo);
        $this->assign('orderInfo',$orderInfo);
        $this->assign('buyerInfo',$buyerInfo);
        return $this->fetch();
    }

    /**
     *  [授权、拒绝退款]
     */
    public function changeFinanceState(){
        $id = input('post.id');
        $state = input('post.state');
        DB::startTrans();
        try {
            DB::table('tp_business_finance')->where('id',$id)->update(['order_state' => $state]);
            if($state == 50){// 如果拒绝退款，墓位状态复原
                $cemetery_sn = DB::table('tp_business_finance')->where('id',$id)->value('cemetery_sn');
                $ceme_state = DB::table('tp_cemetery_sn')->where('cemetery_sn',$cemetery_sn)->value('this_state');
                $this_state = $ceme_state - 60;
                DB::table('tp_cemetery_sn')->where('cemetery_sn',$cemetery_sn)->update(['this_state'=>$this_state]);
            }
            Db::commit();
            return ['code'=>1,'msg'=>'操作成功'];
        } catch (Exception $e) {
            Db::rollback();
            return ['code'=>0,'msg'=>'操作失败'.$e];
        }  
    }


    /**
     * [退款]
     */
    public function chequesRefund(){
        $id = input('post.id');
        $state = Db::name($this->table)->where('id', $id)->value('order_state');
        if($state != 40){
            $this->error('没有授权退款');
        }
        $ForderSn = Db::name($this->table)->where('id', $id)->value('order_sn');
        $Frefund = Db::name($this->table)->where('id', $id)->value('order_amount');
        if($ForderSn == ''){
            $this->error('该订单不存在');
        }
        $Corder = DB::table('tp_cemetery_order')->where('order_sn',$ForderSn)->find();
        $order=[
            'order_state'=>0,
            'refund'=>$Frefund,
            'refund_time'=>date('Y-m-d',time())
        ];
        $cesell=[
          'is_sell'=>0,
          'this_state'=>0
        ];
        DB::startTrans();
        try {
            Db::table('tp_cemetery_order')->where('order_sn',$ForderSn)->update($order);
            Db::table('tp_cemetery_sn')->where('cemetery_sn',$Corder['cemetery_sn'])->update($cesell);
            Db::name($this->table)->where('id', $id)->update([
                'order_state' => 30,
                'finnshed_time' => time(),
                'pay_type'=>input('post.pay_type'),
                'desc'=>input('post.desc')
            ]);
            Db::commit();
            $this->success("付款成功！", '');
        } catch (Exception $e) {
            Db::rollback();
            $this->error("付款失败，请稍候再试！");
        }
    }

    /**
     * [离散均分订单时间(为了方便测试)]
     */
    // public function AverageFinanceAddTime(){
    //     $param = input('post.');
    //     $start_time = strtotime(explode('/',$param['val'])[0]);
    //     $end_time = strtotime(explode('/',$param['val'])[1]);

    //     $num = DB::table('tp_business_finance')->where('order_state',30)->count();
    //     if($num == 0){
    //         return ['code'=>0,'msg'=>'表中没有数据'];
    //     }
    //     $step = abs($end_time - $start_time) / $num;//步长

    //     DB::startTrans();
    //     try {
    //         $k = 1;// id起始
    //         for($i = $start_time;$i <= $end_time; $i += $step){
    //             DB::table('tp_business_finance')->where('id',$k)->update(['add_time'=>$i]);
    //             $k ++ ;
    //         }
    //         Db::commit();
    //         return ['code'=>1,'msg'=>'成功'];
    //     } catch (Exception $e) {
    //         Db::rollback();
    //         return ['code'=>0,'msg'=>'失败'.$e];
    //     }  
    // }
}
