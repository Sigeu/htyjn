<?php
// +----------------------------------------------------------------------
// | Ht.Memorial
// +----------------------------------------------------------------------
// | Copyright (c) 2017-2017 http://www.yn123.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: andy <290648237@qq.com>
// +----------------------------------------------------------------------

namespace app\business\controller;

use app\business\service\DataService;
use app\business\service\ToolsService;
use think\Db;

/**
 * 寄存管理
 * Class Storage
 * @package app\business\controller
 * @author andy <290648237@qq.com>
 * @date 2017/6/28
 */
class Storage extends BasicBusiness
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->user = session('b_user');
        $this->uid = $this->user['create_by'];

        $grave = Db::name('CemeteryTomb')->where(['is_deleted'=>0,'create_by'=>$this->uid,'pid'=>0])->order('sort desc,id desc')->find();
        $this->assign('grave',$grave);
    }

    /**
     * 指定当前骨灰盒数据表
     * @var string
     */
    protected $urnTypeTable = 'StorageUrnType';

    /**
     * 指定当前寄存位置分类数据表
     * @var string
     */
    protected $categoryTable = 'StorageCategory';

    /**
     * 指定当前寄存排位数据表
     * @var string
     */
    protected $rowTable = 'StorageRow';

    /**
     * 指定当前寄存位置主数据表
     * @var string
     */
    protected $urnTable = 'StorageUrn';

    /**
     * 指定当前寄存登记数据表
     * @var string
     */
    protected $registerTable = 'StorageRegister';

    /**
     * 指定当前使用人数据表
     * @var string
     */
    protected $deadTable = 'StorageDead';

    /**
     * 指定当前寄存订单数据表
     * @var string
     */
    protected $orderTable = 'StorageOrder';

    /***************************** 骨灰盒管理 *****************************/

    /**
     * 骨灰盒型 列表
     */
    public function urntype()
    {
        $this->title = '骨灰盒管理';
        $get = $this->request->get();
        // 实例Query对象
        $db = Db::name($this->urnTypeTable);

        // 应用搜索条件
        foreach (['name', 'description'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }

        parent::_list($db);
    }

    /**
     * 添加
     */
    public function addUrnType()
    {
        return $this->_form($this->urnTypeTable, 'urntypeform');
    }

    /**
     * 编辑
     */
    public function editUrnType() {
        return $this->addUrnType();
    }

    /**
     * 禁用
     */
    public function forbidUrnType()
    {
        if (DataService::update($this->urnTypeTable)) {
            $this->success("禁用成功！", '');
        }
        $this->error("禁用失败，请稍候再试！");
    }

    /**
     * 启用
     */
    public function resumeUrnType() {
        if (DataService::update($this->urnTypeTable)) {
            $this->success("启用成功！", '');
        }
        $this->error("启用失败，请稍候再试！");
    }

    /**
     * 删除
     */
    public function delUrnType()
    {
        if (DataService::update($this->urnTypeTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /***************************** 寄存分类管理 *****************************/

    /**
     * 分类列表
     */
    public function category()
    {
        $this->title = '寄存分类管理';
        $db = Db::name($this->categoryTable)->where('create_by', $this->user['id'])->order('sort asc, id asc');
        parent::_list($db, false);

    }

    /**
     * 分类 列表数据处理
     * @param array $data
     */
    protected function _category_data_filter(&$data)
    {

        foreach ($data as &$vo) {
            $vo['ids'] = join(',', ToolsService::getArrSubIds($data, $vo['id']));

            // 判断该分类下是否存在寄存位
            $exist = Db::name($this->categoryTable)->where('pid', $vo['id'])->count();
            if($exist) {
                $vo['has_child'] = true;
            }else {
                $vo['has_child'] = false;
            }
        }
        $data = ToolsService::arr2table($data);
    }

    /**
     * 添加分类
     */
    public function addCategory()
    {
        return $this->_form($this->categoryTable, 'categoryform');
    }

    /**
     * 编辑分类
     */
    public function editCategory()
    {
        return $this->addCategory();
    }

    /**
     * 分类 表单数据前缀方法
     * @param array $vo
     */
    protected function _form_filter(&$vo)
    {
        if ($this->request->isGet()) {
            // 上级分类处理
            $menus = $this->_getStorageCategoryTable();

            $cid = $this->request->param('cid');
            if($cid){
                $vo['pid'] = $cid;
            }

            $this->assign('menus', $menus);
        }

        if ($this->request->isPost()) {
            $vo['create_by'] = $this->user['id'];
        }
    }

    /**
     * 删除分类
     */
    public function delCategory() {
        if (DataService::update($this->categoryTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /**
     * 获取分类 表格结构 辅助方法
     * @return array
     */
    private function _getStorageCategoryTable()
    {
        // 分类处理
        $_menus = Db::name($this->categoryTable)->where('create_by', $this->user['id'])->order('sort desc,id asc')->select();
//        $_menus[] = ['name' => '顶级分类', 'id' => '0', 'pid' => '-1'];
        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }
        return $menus;
    }

    /**
     * 获取分类 树形结构 辅助方法
     * @return array
     */
    private function _getStorageCategoryTree()
    {
        // 分类处理
        $_menus = Db::name($this->categoryTable)->where('create_by', $this->user['id'])->order('sort desc,id asc')->select();
        $menus = ToolsService::arr2tree($_menus, 'id', 'pid', 'children');
        return $menus;
    }

    /***************************** 自动生成寄存位 *****************************/

    /**
     * 自动生成寄存位
     */
    public function generateUrn() {

        return $this->_form($this->urnTable, 'generateurnform');
    }

    /**
     * 分类 表单数据前缀方法
     * @param array $vo
     */
    protected function _generateUrn_form_filter(&$vo) {

        if ($this->request->isPost()) {
            // 判断该分类下是否存在寄存位
            $exist = Db::name($this->urnTable)->where('category_id', $vo['pid'])->count();
            if($exist) {
                $this->error('该分类下已经存在寄存位，不能重复生成！');
            }

            // 如果没选择分类 提示错误
            if(empty($vo['pid'])) {
                $this->error('请选择一个分类！');
            }

            // 不能选择含下级分类的
            $hasChild = Db::name($this->categoryTable)->where('pid', $vo['pid'])->count();
            if($hasChild) {
                $this->error('所选分类下不能包含下级分类，请重新选择！');
            }

            // 更新 storage_category row column 字段
            $cData = [
                'id'=>$vo['pid'],
                'row' => $vo['row'],
                'column' => $vo['column']
            ];

            $ret = Db::name($this->categoryTable)->data($cData)->update();

            // 批量插入寄存位数据到 storage_urn
            $generateNum = $vo['row'] * $vo['column']; // 批量生成总数
            $uid = $this->user['create_by'];
            $cid = $vo['pid'];
            if($generateNum > 1000) {
                $this->error('允许生成寄存位最大数量为1000个！');
            }

            // 准备批量生成寄存位
            $urnData = [];
            for ($i = 1; $i <= $generateNum; $i++) {
                $generateLength = strlen($generateNum);
                $uidLength = strlen($uid);
                $cidLength = strlen($cid);

                $newGenerateNum = $i;
                if($generateLength < 4) {
                    // 如果生成数量小于1000个 则用“0”补全
                    $newGenerateNum = str_pad($i, 4, "0", STR_PAD_LEFT);
                }

                if($uidLength < 5) {
                    // 如果用户ID长度小于10000 则用“0”补全
                    $uid = str_pad($uid, 5, "0", STR_PAD_LEFT);
                }

                if($cidLength < 4) {
                    // 如果分类ID长度小于1000 则用“0”补全
                    $cid = str_pad($cid, 4, "0", STR_PAD_LEFT);
                }

                $urnSn = $uid.$cid.$newGenerateNum;

                $urn = [
                    'urn_sn'        => $urnSn,
                    'category_id'   => $vo['pid'],
                    'name'          => $vo['name'],
                    'price'         => $vo['price'],
                    'status'        => 1,
                    'is_sold'       => 0,
                    'create_by'     => $this->user['create_by'],
                    'create_at'     => time()
                ];
                $urnData[] = $urn;
            }

            $res = Db::name($this->urnTable)->insertAll($urnData);

            $res && $ret !== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('storage/category').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');
        }
    }

    /***************************** 寄存位平面图 *****************************/

    /**
     * 寄存位平面图
     */
    public function urnTree()
    {
        $alert = [
            'type'    => 'info',
            'title'   => '寄存位状态提示',
            'content' => '<ul>
            <li>使用中<span style="background: #a94442"></span></li>
            <li>空缺中<span style="background: #3c763d"></span></li>
            <li>不可用<span style="background: #8a6d3b"></span></li>
            <li>续费提醒<span style="background: #f00"></span></li>
            </ul>'
        ];
        $this->assign('alert', $alert);

        $this->title = '寄存位平面图';
        $category = $this->_getStorageCategoryTree();

        if ($category && isset($category[0]['children'])) {
            $category[0]['spread'] = true; // 默认展开第一个

            $parentCid = $category[0]['id'];
            $categoryId = $category[0]['children'][0]['id'];

            $parentCname = $this->_getCateNameById($parentCid);
            $categoryName = $this->_getCateNameById($categoryId);

            $data = $this->_getUrnsByCategoryID($categoryId);

            list($needRenewal, $available, $unavailable, $disabled) = $this->_getUrnStatusArray($categoryId);
        }else {
            $data = [];
            $needRenewal = $available = $unavailable = $disabled = $categoryId = 0;
            $parentCname = $categoryName = '';
        }

        $assignData = [
            'data' => $data,
            'title' => $this->title,
            'category' => json_encode($category),
            'needRenewal' => $needRenewal, // 获取续费提醒数量
            'available' => $available,
            'unavailable' => $unavailable,
            'disabled' => $disabled,
            'parentCname' => $parentCname,
            'categoryName' => $categoryName,
            'categoryId' => $categoryId
        ];

        // 面包屑

        return $this->fetch('urntree', $assignData);
    }

    /**
     * 获取寄存位Ajax
     * @return array
     */
    public function ajaxGetUrn()
    {
        $cid = $this->request->param('cid');

        $data = $this->_getUrnsByCategoryID($cid);

        $parentCid = Db::name($this->categoryTable)->where('id', $cid)->value('pid');

        $parentCname = $this->_getCateNameById($parentCid);
        $categoryName = $this->_getCateNameById($cid);

        list($needRenewal, $available, $unavailable, $disabled) = $this->_getUrnStatusArray($cid);
        $assignData = [
            'data' => $data,
            'needRenewal' => $needRenewal, // 获取续费提醒数量
            'available' => $available,
            'unavailable' => $unavailable,
            'disabled' => $disabled,
            'parentCname' => $parentCname,
            'categoryName' => $categoryName,
            'categoryId' => $cid
        ];

        $resData = [
            'ret' => 1,
            'html' => $this->fetch('_urntree_list', $assignData)
            ];
        return $resData;
    }

    /**
     * 根据分类ID获取寄存位
     *
     * @param int $categoryID 分类ID
     * @return array
     */
    private function _getUrnsByCategoryID($categoryID)
    {
        $map = [
//            'status' => 1
        ];

        $data = Db::name($this->urnTable)->where('category_id', $categoryID)->where($map)->limit(1000)->select();

        $dataNum = count($data);

        //结构化数据，兼容ajax的返回格式
        $categoryInfo = Db::name($this->categoryTable)->where('id', $categoryID)->find();
        $row = $categoryInfo['row'];
        $column = $categoryInfo['column'];

        $tmp = 1;
        $returnData = [];
        for($i=1; $i <= $row; $i++) {
            for ($j = 1; $j <= $column; $j++) {
                if ($tmp <= $dataNum) {
                    $returnData[$i][$j] = $data[$tmp-1];
                    $tmp ++;
                }
            }
        }

        return $returnData;
    }



    private function _getUrnStatusArray($categoryId)
    {

        // 获取续费提醒数量
        $rMap = [
            'urn.is_sold' => 1,
            'urn.category_id' => $categoryId,
            'register.end_time' => ['lt', (date('Y-m-d', time() + 7 * 24 * 3600))],
            'register.status' => 1
        ];
        $needRenewal = $data = Db::view('storage_urn urn', 'id, category_id, is_sold')
            ->view('storage_register register', 'id, urn_id, end_time, status', 'register.urn_id=urn.id')
            ->where($rMap)
            ->count();

        $available = Db::name($this->urnTable)->where(['category_id'=>$categoryId, 'is_sold' => 0])->count();
        $unavailable = Db::name($this->urnTable)->where(['category_id'=>$categoryId, 'is_sold' => 1])->count();
        $disabled = Db::name($this->urnTable)->where(['category_id'=>$categoryId, 'status' => 0])->count();

        return [$needRenewal, $available, $unavailable, $disabled];
    }

    private function _getCateNameById($categoryId)
    {
        return Db::name($this->categoryTable)->where('id', $categoryId)->value('name');
    }

    /***************************** 寄存位管理 *****************************/

    /**
     * 寄存位 列表
     */
    public function urn()
    {
        $this->title = '寄存位管理';
        $get = $this->request->get();
        // 实例Query对象
        $db = Db::name($this->urnTable)->where('create_by', $this->user['create_by']);

        // 应用搜索条件
        foreach (['name'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }

        parent::_list($db);
        $rMap = [];
//        if (isset($get['cid'])) {
//            $rMap['urn.category_id'] = $get['cid'];
//        }
//        $rMap = [
//            'urn.is_sold' => 1,
//            'register.end_time' => ['lt', (date('Y-m-d', time() + 7 * 24 * 3600))],
//            'register.status' => 1
//        ];
//        $list = $data = Db::view('storage_urn urn', '*')
//            ->view('storage_register register', 'id, urn_id, end_time, status', 'register.urn_id=urn.id')
//            ->where($rMap)
//            ->select();

//        return $this->fetch('', ['list' => $list, 'title' => $this->title]);
    }

    /**
     * 商品分类 列表数据处理
     * @param array $data
     */
    protected function _urn_data_filter(&$data)
    {
        foreach ($data as &$vo) {
            $vo['needRenewal'] = 0;
            if ($vo['is_sold']) {
                // 如果已经售出 获取寄存登记者信息
                $registerInfo = Db::name('storage_register')->where('id', $vo['register_id'])->find();
                if ($registerInfo['end_time'] < (date('Y-m-d', time() + 7 * 24 * 3600))) {
                    $vo['needRenewal'] = 1;
                }
            }
        }

    }

    /**
     * 添加
     */
    public function addUrn() {
        return $this->_form($this->urnTable, 'urnform');
    }
//
    /**
     * 编辑
     */
    public function editUrn() {
        return $this->addUrn();
    }

    /**
     * 禁用
     */
    public function forbidUrn() {
        if (DataService::update($this->urnTable)) {
            $this->success("禁用成功！", '');
        }
        $this->error("禁用失败，请稍候再试！");
    }

    /**
     * 启用
     */
    public function resumeUrn() {
        if (DataService::update($this->urnTable)) {
            $this->success("启用成功！", '');
        }
        $this->error("启用失败，请稍候再试！");
    }

    /**
     * 删除
     */
    public function delUrn() {
        if (DataService::update($this->urnTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /***************************** 寄存登记管理 *****************************/

    /**
     * 寄存登记
     * @return mixed|void
     */
    public function urnRegister()
    {
        $this->title = '寄存登记';
        $params = $this->request->param();

        // 获取寄存位基本信息
        $urnInfo = Db::name($this->urnTable)->where('id', $params['urn_id'])->find();

        // 显示信息 初始化数据
        $registerInfo = $deadInfo = [];

        if($params['is_sold']) {
            // 判断请求的寄存位是否售出 如果是售出状态 则修改/查看登记信息
            // 修改登记信息
            $this->_editRegisterData($params);

            // 获取寄存信息
            $registerInfo = Db::name($this->registerTable)->where('id', $urnInfo['register_id'])->find();

            // 获取使用人信息
            $deadInfo = Db::name($this->deadTable)->where('id', $registerInfo['dead_id'])->find();
        }

        if ($this->request->isPost()) {

            // 新增信息
            // 判断使用人是否存在
            if ($this->_checkDeadIfExist($params['dead_id_card'])) {
                // 如果存在 则抛出错误异常
                return $this->error('使用人信息已经存在，请不用重复登记!');
            }

            // 存储使用人信息
            $deadData = [
                'dead_name' => $params['dead_name'],
                'dead_id_card' => $params['dead_id_card'],
                'sex' => $params['sex'],
                'dead_birthday' => $params['dead_birthday'],
                'dead_domicile' => $params['dead_domicile'],
                'dead_deadday' => $params['dead_deadday'],
                'address' => $params['address'],
                'dead_workplace' => $params['dead_workplace'],
                'dead_nation' => $params['dead_nation'],
                'create_by' => $this->user['create_by'],
                'create_at' => time()
            ];
            $deadId = Db::name($this->deadTable)->insertGetId($deadData);

            if ($deadId) {

                // 存储寄存信息
                $registerData = [
                    'urn_id' => $params['urn_id'],
                    'urn_sn' => $urnInfo['urn_sn'],
                    'register_sn' => $urnInfo['urn_sn'].'-'.strtoupper(uniqid()),
                    'dead_id' => $deadId,
                    'customer_id' => $params['customer_id'],
                    'customer_name' => $params['customer_name'],
                    'cost' => $params['cost'],
                    'relation' => $params['relation'],
                    'start_time' => $params['start_time'],
                    'remark' => $params['remark'],
                    'end_time' => $params['end_time'],
                    'create_by' => $this->user['create_by'],
                    'create_at' => time()
                ];
                $registerId = Db::name($this->registerTable)->insertGetId($registerData);

                if ($registerId) {
                    // 更新寄存位表相关字段
                    $urnData = [
                        'register_id' => $registerId,
                        'is_sold' => 1,
                        'dead_name' => $params['dead_name'],
                        'update_at' => time()
                    ];
                    $urnRes = Db::name($this->urnTable)->where('id', $params['urn_id'])->update($urnData);

                    // 生成订单
                    $orderData = [
                        'order_sn' => $registerData['urn_sn'].'-'.strtoupper(uniqid()),
                        'register_id' => $registerId, // 寄存登记ID
                        'register_sn' => $registerData['register_sn'], // 寄存登记编号SN
                        'urn_id' => $urnInfo['id'], // 寄存位ID
                        'urn_name' => $urnInfo['name'], // 寄存位名称
                        'customer_id' => $params['customer_id'],
                        'customer_name' => $params['customer_name'],
                        'cost' => $params['cost'],
                        'price' => $urnInfo['price'],
                        'start_time' => $params['start_time'],
                        'remark' => $params['remark'],
                        'end_time' => $params['end_time'],
                        'create_by' => $this->user['create_by'],
                        'create_at' => time()
                    ];
                    Db::name($this->orderTable)->insert($orderData);

                    return $urnRes !== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('urntree').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');
                }
            }

        }

        $parentCid = Db::name($this->categoryTable)->where('id', $urnInfo['category_id'])->value('pid');

        $parentCname = $this->_getCateNameById($parentCid);
        $categoryName = $this->_getCateNameById($urnInfo['category_id']);

        $this->assign('vo', $registerInfo);
        $this->assign('deadInfo', $deadInfo);
        $this->assign('urnInfo', $urnInfo);
        $this->assign('parentCname', $parentCname);
        $this->assign('categoryName', $categoryName);
        $this->package();
        // 判断请求的寄存位是否可用
        if(!$urnInfo['status']) {
            // 寄存位已关闭
            return $this->error('该寄存位已关闭，请选择其他寄存位！', url('/').'business.html#'.url('urntree').'?spm='.$this->spm);
        }
        
        return $this->fetch('urnregister', ['title' => $this->title]);
    }

    /**
     * 套餐内容
     */
    public function package()
    {
        $stor_pack=Db::name('cemetery_combo')->where(['type'=>2,'create_by'=>$this->uid])->select();
        $this->assign('stor_pack',$stor_pack);
    }


    /**
     * 修改寄存登记信息
     * @param array $params post参数
     */
    private function _editRegisterData($params)
    {
        if($this->request->isPost()) {
            // 更新信息

            // 更新使用人信息
            $deadData = [
                'dead_name' => $params['dead_name'],
                'dead_id_card' => $params['dead_id_card'],
                'sex' => $params['sex'],
                'dead_birthday' => $params['dead_birthday'],
                'dead_domicile' => $params['dead_domicile'],
                'dead_deadday' => $params['dead_deadday'],
                'address' => $params['address'],
                'dead_workplace' => $params['dead_workplace'],
                'dead_nation' => $params['dead_nation'],
                'create_by' => $this->user['create_by'],
                'update_at' => time()
            ];
            $deadRes = Db::name($this->deadTable)->where('dead_id_card', $params['dead_id_card'])->update($deadData);

            // 更新寄存信息
            $registerData = [
                'customer_id' => $params['customer_id'],
                'customer_name' => $params['customer_name'],
                'cost' => $params['cost'],
                'relation' => $params['relation'],
                'start_time' => $params['start_time'],
                'remark' => $params['remark'],
                'end_time' => $params['end_time'],
                'create_by' => $this->user['create_by'],
                'update_at' => time()
            ];
            $registerRes = Db::name($this->registerTable)->where('id', $params['id'])->update($registerData);

            $urnData = [
                'dead_name' => $params['dead_name'],
                'update_at' => time()
            ];
            $urnRes = Db::name($this->urnTable)->where('id', $params['urn_id'])->update($urnData);
            return $urnRes !== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('urntree').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');
        }

    }

    /**
     * 寄存登记 选择客户
     */
    public function selectRegister()
    {
        if($this->request->isPost()) {
            $param = input('post.');
            $limit = $param['pageSize'];
            $page = $param['pageNumber']-1;
            $limit_start = $page*$limit;
            $limit_end = $param['pageSize'];
            $map=[
                'is_deleted'=>0,
                'create_by'=>$this->user['create_by']
            ];
            // $db = Db::name("Customer")->where($map);
            // parent::_list($db);

            $data = DB::table('tp_customer')->where($map)->limit($limit_start,$limit_end)->select();
            $count = DB::table('tp_customer')->where($map)->limit($limit_start,$limit_end)->count();    

            foreach ($data as $k => $v) {
                if($v['status'] == 1){
                    $data[$k]['status'] = '<span style="color:#090">已启用<span>';
                }else{
                    $data[$k]['status'] = '<span style="color:red">已禁用<span>';
                }
            }


            $res['total'] = $count;
            $res['rows'] = $data;
            
            return $res;
        }
        return $this->fetch();
    }

    /**
     * 检查使用人是否已经存在
     * @param string $deadIdCard 使用人身份证号
     * @return array|false|\PDOStatement|string|\think\Model
     */
    private function _checkDeadIfExist($deadIdCard)
    {
        $result = Db::name($this->deadTable)->where('dead_id_card', $deadIdCard)->find();
        return $result;
    }

    /***************************** 寄存订单管理 *****************************/

    /**
     * 寄存费用订单列表
     */
    public function order()
    {
        $this->title = '寄存费用订单管理';
        $get = $this->request->get();

        $db = Db::name($this->orderTable)->where('create_by', $this->user['create_by'])->order('create_at desc');

        // 根据 register_id 获取指定寄存登记表下面的所有费用清单
        if(isset($get['register_id'])) {
            $db->where('register_id', $get['register_id']);
        }

        // 应用搜索条件
        foreach (['order_sn', 'customer_name'] as $key) {
            if (isset($get[$key]) && $get[$key] !== '') {
                $db->where($key, 'like', "%{$get[$key]}%");
            }
        }

        parent::_list($db);
    }

    /**
     * 删除订单
     */
    public function delOrder() {
        if (DataService::update($this->orderTable)) {
            $this->success("删除成功！", '');
        }
        $this->error("删除失败，请稍候再试！");
    }

    /***************************** 寄存取走 *****************************/

    /**
     * 寄存取走
     * @return mixed|void
     */
    public function urnLeave()
    {
        $params = $this->request->param();
        $registerId = $params['register_id'];

        $registerInfo = Db::name($this->registerTable)->where('id', $registerId)->find();


        if($this->request->isPost()) {

            // 更新寄存登记表状态 为已取走 status = 2
            $registerData = [

                'leave_remark' => $params['leave_remark'],
                'status' => 2,
                'leave_time' => date('Y-m-d', time()),
                'leaver' => $params['leaver'],
                'update_at' => time()
            ];
            Db::name($this->registerTable)->where('id', $registerId)->update($registerData);

            // 更新寄存位信息 初始化为空位
            $urnData = [
                'register_id' => 0,
                'is_sold' => 0,
                'dead_name' => '',
                'update_at' => time()
            ];
            $res = Db::name($this->urnTable)->where('id', $registerInfo['urn_id'])->update($urnData);

            return $res !== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('urntree').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');

        }

        $customerId = $registerInfo['customer_id'];
        $customerInfo =  Db::name("Customer")->where('id', $customerId)->find();

       return $this->fetch('leaveform', ['customerInfo' => $customerInfo]);
    }

    /***************************** 寄存续费 *****************************/

    /**
     * 寄存续费
     * @return mixed
     */
    public function urnRenewal()
    {
        $params = $this->request->param();
        $registerId = $params['register_id'];


        $registerInfo = Db::name($this->registerTable)->where('id', $registerId)->find();
        $urnInfo = Db::name($this->urnTable)->where('id', $registerInfo['urn_id'])->find();
        $customerInfo = Db::name('Customer')->where('id', $registerInfo['customer_id'])->find();

        if($this->request->isPost()) {

            // 生成订单
            $orderData = [
                'order_sn' => $registerInfo['register_sn'].'-'.strtoupper(uniqid()),
                'customer_id' => $customerInfo['id'],
                'customer_name' => $customerInfo['username'],
                'register_id' => $registerId, // 寄存登记ID
                'register_sn' => $registerInfo['register_sn'], // 寄存登记编号SN
                'urn_id' => $urnInfo['id'], // 寄存位ID
                'urn_name' => $urnInfo['name'], // 寄存位名称
                'cost' => $params['cost'],
                'price' => $urnInfo['price'],
                'start_time' => $registerInfo['start_time'],
                'remark' => $params['remark'],
                'end_time' => $params['end_time'],
                'create_by' => $this->user['create_by'],
                'create_at' => time()
            ];
            $res = Db::name($this->orderTable)->insert($orderData);

            // 更新寄存登记表结束时间
            $registerData = [
                'cost' => $registerInfo['cost'] + $params['cost'],
                'update_at' => time(),
                'end_time' => $params['end_time']
            ];
            Db::name($this->registerTable)->where('id', $registerId)->update($registerData);

            return $res !== false ? $this->success('恭喜，保存成功哦！', url('/').'business.html#'.url('urntree').'?spm='.$this->spm) : $this->error('保存失败，请稍候再试！');
        }
        return $this->fetch('renewalform', ['registerInfo' => $registerInfo]);
    }
}
