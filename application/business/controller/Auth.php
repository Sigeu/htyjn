<?php
// +----------------------------------------------------------------------
// | Ht.Memorial
// +----------------------------------------------------------------------
// | Copyright (c) 2017-2017 http://www.yn123.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: yn123 <www.yn123.com>
// +----------------------------------------------------------------------

namespace app\business\controller;

use app\business\model\NodeModel;
use app\business\service\DataService;
use app\business\service\ToolsService;
use think\Db;

/**
 * 系统权限管理控制器
 * Class Auth
 * @package app\admin\controller
 * @author yn123 <www.yn123.com>
 * @date 2017/02/15 18:13
 */
class Auth extends BasicBusiness {
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        dump($this->user);die;
        $this->uid = $this->user['create_by'];
    }

    /**
     * 默认数据模型
     * @var string
     */
    protected $table = 'BusinessAuth';

    /**
     * 权限列表
     */
    public function index()
    {

        // 设置页面标题
        $this->title = '部门管理';
        // 获取到所有GET参数
        $get = $this->request->get();
        // 实例Query对象
        $map=[
            'is_deleted'=>0,
            'create_by'=>$this->uid
        ];
        $db = Db::name($this->table)->where($map);
//        dump($db);die;
        // 实例化并显示
        parent::_list($db,false);
    }


    /**
     * 分类 列表数据处理
     * @param array $data
     */
    protected function _index_data_filter(&$data)
    {

        foreach ($data as &$vo) {
            $vo['ids'] = join(',', ToolsService::getArrSubIds($data, $vo['id']));
            $exist = Db::name($this->table)->where('pid', $vo['id'])->count();

            if($exist) {
                $vo['has_child'] = true;
            }else {
                $vo['has_child'] = false;
            }
        }

        $data = ToolsService::arr2table($data);
    }

    /**
     * 权限授权
     * @return string|array
     */
    public function apply()
    {

        $auth_id = $this->request->get('id', '0');
        switch (strtolower($this->request->get('action', '0'))) {
            case 'getnode':
                $needle = [
                    'business'
                ];
                $nodes = NodeModel::getNeedle($needle);
                $checked = Db::name('BusinessAuthNode')->where('auth', $auth_id)->column('node');

                foreach ($nodes as $key => &$node) {
                    $node['checked'] = in_array($node['node'], $checked);
                    if (empty($node['is_auth']) && substr_count($node['node'], '/') > 1) {
                        unset($nodes[$key]);
                    }
                }
                $this->success('获取节点成功！', '', $this->_filterNodes($this->_filterNodes(ToolsService::arr2tree($nodes, 'node', 'pnode', '_sub_'))));
                break;
            case 'save':
                $data = [];
                $post = $this->request->post();
                foreach (isset($post['nodes']) ? $post['nodes'] : [] as $node) {
                    $data[] = ['auth' => $auth_id, 'node' => $node];
                }
                Db::name('BusinessAuthNode')->where('auth', $auth_id)->delete();
                Db::name('BusinessAuthNode')->insertAll($data);
                $this->success('节点授权更新成功！', '');
                break;
            default :
                $this->assign('title', '节点授权');
                return $this->_form($this->table, 'apply');
        }
    }

    /**
     * 节点数据拼装
     * @param array $nodes
     * @param int $level
     * @return array
     */
    protected function _filterNodes($nodes, $level = 1)
    {
        foreach ($nodes as $key => &$node) {
            if (!empty($node['_sub_']) && is_array($node['_sub_'])) {
                $node['_sub_'] = $this->_filterNodes($node['_sub_'], $level + 1);
            } elseif ($level < 3) {
                unset($nodes[$key]);
            }
        }
        return $nodes;
    }


    /*
    *添加部门
    */
    public function add()
    {
        // 获取上级部门
        $menus = $this->_getDepartment();
        $this->assign('menus', $menus);
        return $this->_form($this->table, 'form');

    }

    /**
     * 编辑部门
     */
    public function edit()
    {
        return $this->add();
    }

    /*
    *添加职位
    */
    public function add_duty()
    {
        // 获取部门
        $id=$this->request->get('id');
        if(isset($id)){
            $pid=Db::name($this->table)->where('id',$id)->value('pid');
        }else{
            $pid = $this->request->get('pid');
        }
        $menus = Db::name($this->table)->where('id',$pid)->find();
        $this->assign('menus', $menus);
        return $this->_form($this->table, 'dutyform');

    }

    /**
     * 编辑职位
     */
    public function edit_duty()
    {
        return $this->add_duty();
    }

    /**
     * 获取上级部门 辅助方法
     * @return array
     */
    private function _getDepartment()
    {
        $map=[
            'is_deleted'=>0,
            'create_by'=>$this->uid
        ];
        $_menus = Db::name($this->table)->where($map)->order('sort desc,id desc')->select();
        $_menus[] = ['name' => '顶级部门', 'id' => '0', 'pid' => '-1'];
        $menus = ToolsService::arr2table($_menus);
        foreach ($menus as $key => &$menu) {
            if (substr_count($menu['path'], '-') > 3) {
                unset($menus[$key]);
                continue;
            }
            if (isset($vo['pid'])) {
                $current_path = "-{$vo['pid']}-{$vo['id']}";
                if ($vo['pid'] !== '' && (stripos("{$menu['path']}-", "{$current_path}-") !== false || $menu['path'] === $current_path)) {
                    unset($menus[$key]);
                }
            }
        }
        return $menus;
    }


    /**
     * 权限禁用
     */
    public function forbid()
    {
        if (DataService::update($this->table)) {
            $this->success("权限禁用成功！", '');
        }
        $this->error("权限禁用失败，请稍候再试！");
    }

    /**
     * 权限恢复
     */
    public function resume()
    {
        if (DataService::update($this->table)) {
            $this->success("权限启用成功！", '');
        }
        $this->error("权限启用失败，请稍候再试！");
    }

    /**
     * 权限删除
     */
    public function del()
    {
        if (DataService::update($this->table)) {
            $id = $this->request->post('id');
            Db::name('SystemAuthNode')->where('auth', $id)->delete();
            $this->success("权限删除成功！", '');
        }
        $this->error("权限删除失败，请稍候再试！");
    }

}
